

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Fri Apr 19 16:55:35 2024

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og9 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    42  0000                     
    43                           ; Version 2.20
    44                           ; Generated 12/02/2020 GMT
    45                           ; 
    46                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F8722 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	smallconst
    79  001000                     __psmallconst:
    80                           	callstack 0
    81  001000  00                 	db	0
    82  001001                     _L:
    83                           	callstack 0
    84  001001  02                 	db	2
    85  001002  00                 	db	0
    86  001003  00                 	db	0
    87  001004  E0                 	db	224
    88  001005                     __end_of_L:
    89                           	callstack 0
    90  001005  01                 	db	1
    91  001006  00                 	db	0
    92  001007  00                 	db	0
    93  001008  F0                 	db	240
    94  001009                     __end_of_SQUARE:
    95                           	callstack 0
    96  001009  00                 	db	0
    97  00100A  00                 	db	0
    98  00100B  00                 	db	0
    99  00100C  80                 	db	128
   100  00100D                     __end_of_DOT:
   101                           	callstack 0
   102  00100D  00                 	db	0	; dummy byte at the end
   103  0000                     
   104                           	psect	nvCOMRAM
   105  00003A                     __pnvCOMRAM:
   106                           	callstack 0
   107  00003A                     _lastPortB:
   108                           	callstack 0
   109  00003A                     	ds	1
   110  00003B                     _lastPortA:
   111                           	callstack 0
   112  00003B                     	ds	1
   113  0000                     _INTCONbits	set	4082
   114  0000                     _RCONbits	set	4048
   115  0000                     _INTCON	set	4082
   116  0000                     _T0CONbits	set	4053
   117  0000                     _TMR0L	set	4054
   118  0000                     _TMR0H	set	4055
   119  0000                     _T0CON	set	4053
   120  0000                     _TRISF	set	3991
   121  0000                     _TRISE	set	3990
   122  0000                     _TRISD	set	3989
   123  0000                     _TRISC	set	3988
   124  0000                     _LATF	set	3982
   125  0000                     _LATE	set	3981
   126  0000                     _LATD	set	3980
   127  0000                     _LATC	set	3979
   128  0000                     _TRISB	set	3987
   129  0000                     _LATB	set	3978
   130  0000                     _PORTB	set	3969
   131  0000                     _TRISA	set	3986
   132  0000                     _LATA	set	3977
   133  0000                     _PORTA	set	3968
   134  0000                     _ADCON1	set	4033
   135                           
   136                           ; #config settings
   137                           
   138                           	psect	cinit
   139  001C46                     __pcinit:
   140                           	callstack 0
   141  001C46                     start_initialization:
   142                           	callstack 0
   143  001C46                     __initialization:
   144                           	callstack 0
   145                           
   146                           ; Clear objects allocated to COMRAM (10 bytes)
   147  001C46  EE00  F030         	lfsr	0,__pbssCOMRAM
   148  001C4A  0E0A               	movlw	10
   149  001C4C                     clear_0:
   150  001C4C  6AEE               	clrf	postinc0,c
   151  001C4E  06E8               	decf	wreg,f,c
   152  001C50  E1FD               	bnz	clear_0
   153  001C52                     end_of_initialization:
   154                           	callstack 0
   155  001C52                     __end_of__initialization:
   156                           	callstack 0
   157  001C52  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   158  001C54  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   159  001C56  0100               	movlb	0
   160  001C58  EF2E  F00E         	goto	_main	;jump to C main() function
   161                           
   162                           	psect	bssCOMRAM
   163  000030                     __pbssCOMRAM:
   164                           	callstack 0
   165  000030                     _board:
   166                           	callstack 0
   167  000030                     	ds	4
   168  000034                     HandleTimer@counter:
   169                           	callstack 0
   170  000034                     	ds	1
   171  000035                     _prevA:
   172                           	callstack 0
   173  000035                     	ds	1
   174  000036                     _curTet:
   175                           	callstack 0
   176  000036                     	ds	4
   177                           
   178                           	psect	cstackBANK0
   179  000060                     __pcstackBANK0:
   180                           	callstack 0
   181  000060                     SetBoard@x:
   182                           	callstack 0
   183  000060                     _GetQuartet$439:
   184                           	callstack 0
   185                           
   186                           ; 2 bytes @ 0x0
   187  000060                     	ds	1
   188  000061                     _SetBoard$380:
   189                           	callstack 0
   190                           
   191                           ; 2 bytes @ 0x1
   192  000061                     	ds	1
   193  000062                     _GetQuartet$440:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0x2
   197  000062                     	ds	1
   198  000063                     _SetBoard$381:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x3
   202  000063                     	ds	1
   203  000064                     _GetQuartet$441:
   204                           	callstack 0
   205                           
   206                           ; 2 bytes @ 0x4
   207  000064                     	ds	1
   208  000065                     _SetBoard$382:
   209                           	callstack 0
   210                           
   211                           ; 2 bytes @ 0x5
   212  000065                     	ds	1
   213  000066                     _GetQuartet$442:
   214                           	callstack 0
   215                           
   216                           ; 2 bytes @ 0x6
   217  000066                     	ds	1
   218  000067                     _SetBoard$383:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0x7
   222  000067                     	ds	1
   223  000068                     GetQuartet@x:
   224                           	callstack 0
   225                           
   226                           ; 1 bytes @ 0x8
   227  000068                     	ds	1
   228  000069                     IsColliding@returnVal:
   229                           	callstack 0
   230  000069                     _Move$500:
   231                           	callstack 0
   232                           
   233                           ; 2 bytes @ 0x9
   234  000069                     	ds	1
   235  00006A                     _IsColliding$480:
   236                           	callstack 0
   237                           
   238                           ; 2 bytes @ 0xA
   239  00006A                     	ds	1
   240  00006B                     _Move$501:
   241                           	callstack 0
   242                           
   243                           ; 2 bytes @ 0xB
   244  00006B                     	ds	1
   245  00006C                     _IsColliding$481:
   246                           	callstack 0
   247                           
   248                           ; 2 bytes @ 0xC
   249  00006C                     	ds	1
   250  00006D                     _Move$502:
   251                           	callstack 0
   252                           
   253                           ; 2 bytes @ 0xD
   254  00006D                     	ds	1
   255  00006E                     _IsColliding$482:
   256                           	callstack 0
   257                           
   258                           ; 2 bytes @ 0xE
   259  00006E                     	ds	1
   260  00006F                     _Move$503:
   261                           	callstack 0
   262                           
   263                           ; 2 bytes @ 0xF
   264  00006F                     	ds	1
   265  000070                     _IsColliding$483:
   266                           	callstack 0
   267                           
   268                           ; 2 bytes @ 0x10
   269  000070                     	ds	1
   270  000071                     Move@dir0:
   271                           	callstack 0
   272                           
   273                           ; 1 bytes @ 0x11
   274  000071                     	ds	1
   275  000072                     IsColliding@dir0:
   276                           	callstack 0
   277  000072                     Move@curQuartet:
   278                           	callstack 0
   279                           
   280                           ; 1 bytes @ 0x12
   281  000072                     	ds	1
   282  000073                     IsColliding@shape:
   283                           	callstack 0
   284                           
   285                           ; 1 bytes @ 0x13
   286  000073                     	ds	1
   287  000074                     IsColliding@curQuartet:
   288                           	callstack 0
   289                           
   290                           ; 1 bytes @ 0x14
   291  000074                     	ds	1
   292                           
   293                           	psect	cstackCOMRAM
   294  000001                     __pcstackCOMRAM:
   295                           	callstack 0
   296  000001                     i2SetBoard@y:
   297                           	callstack 0
   298  000001                     i2GetBoard@y:
   299                           	callstack 0
   300  000001                     i2RotateShape@shape:
   301                           	callstack 0
   302                           
   303                           ; 1 bytes @ 0x0
   304  000001                     	ds	1
   305  000002                     ??i2_GetBoard:
   306  000002                     HandlePortB@changedBits:
   307                           	callstack 0
   308  000002                     i2SetBoard@v:
   309                           	callstack 0
   310                           
   311                           ; 1 bytes @ 0x1
   312  000002                     	ds	1
   313  000003                     ??i2_SetBoard:
   314  000003                     HandlePortB@currentPortB:
   315                           	callstack 0
   316                           
   317                           ; 1 bytes @ 0x2
   318  000003                     	ds	1
   319  000004                     i2GetBoard@x:
   320                           	callstack 0
   321                           
   322                           ; 1 bytes @ 0x3
   323  000004                     	ds	1
   324  000005                     i2GetBoard@col:
   325                           	callstack 0
   326                           
   327                           ; 1 bytes @ 0x4
   328  000005                     	ds	1
   329  000006                     i2GetQuartet@y:
   330                           	callstack 0
   331                           
   332                           ; 1 bytes @ 0x5
   333  000006                     	ds	1
   334  000007                     i2GetQuartet@shape:
   335                           	callstack 0
   336                           
   337                           ; 1 bytes @ 0x6
   338  000007                     	ds	1
   339  000008                     ??i2_GetQuartet:
   340  000008                     i2SetBoard@x:
   341                           	callstack 0
   342                           
   343                           ; 1 bytes @ 0x7
   344  000008                     	ds	1
   345  000009                     i2_SetBoard$380:
   346                           	callstack 0
   347                           
   348                           ; 2 bytes @ 0x8
   349  000009                     	ds	1
   350  00000A                     i2_GetQuartet$439:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x9
   354  00000A                     	ds	1
   355  00000B                     i2_SetBoard$381:
   356                           	callstack 0
   357                           
   358                           ; 2 bytes @ 0xA
   359  00000B                     	ds	1
   360  00000C                     i2_GetQuartet$440:
   361                           	callstack 0
   362                           
   363                           ; 2 bytes @ 0xB
   364  00000C                     	ds	1
   365  00000D                     i2_SetBoard$382:
   366                           	callstack 0
   367                           
   368                           ; 2 bytes @ 0xC
   369  00000D                     	ds	1
   370  00000E                     i2_GetQuartet$441:
   371                           	callstack 0
   372                           
   373                           ; 2 bytes @ 0xD
   374  00000E                     	ds	1
   375  00000F                     i2_SetBoard$383:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0xE
   379  00000F                     	ds	1
   380  000010                     i2_GetQuartet$442:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0xF
   384  000010                     	ds	1
   385  000011                     i2SetQuartet@y:
   386                           	callstack 0
   387                           
   388                           ; 1 bytes @ 0x10
   389  000011                     	ds	1
   390  000012                     i2GetQuartet@x:
   391                           	callstack 0
   392  000012                     i2SetQuartet@shape:
   393                           	callstack 0
   394                           
   395                           ; 1 bytes @ 0x11
   396  000012                     	ds	1
   397  000013                     i2SetQuartet@x:
   398                           	callstack 0
   399                           
   400                           ; 1 bytes @ 0x12
   401  000013                     	ds	1
   402  000014                     i2Move@dir1:
   403                           	callstack 0
   404                           
   405                           ; 1 bytes @ 0x13
   406  000014                     	ds	1
   407  000015                     i2_Move$500:
   408                           	callstack 0
   409                           
   410                           ; 2 bytes @ 0x14
   411  000015                     	ds	2
   412  000017                     i2_Move$501:
   413                           	callstack 0
   414                           
   415                           ; 2 bytes @ 0x16
   416  000017                     	ds	2
   417  000019                     i2_Move$502:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0x18
   421  000019                     	ds	2
   422  00001B                     i2_Move$503:
   423                           	callstack 0
   424                           
   425                           ; 2 bytes @ 0x1A
   426  00001B                     	ds	2
   427  00001D                     i2Move@dir0:
   428                           	callstack 0
   429                           
   430                           ; 1 bytes @ 0x1C
   431  00001D                     	ds	1
   432  00001E                     i2Move@curQuartet:
   433                           	callstack 0
   434                           
   435                           ; 1 bytes @ 0x1D
   436  00001E                     	ds	1
   437  00001F                     ??_HandleInterrupt:
   438                           
   439                           ; 1 bytes @ 0x1E
   440  00001F                     	ds	4
   441  000023                     SetBoard@y:
   442                           	callstack 0
   443  000023                     GetBoard@y:
   444                           	callstack 0
   445  000023                     BitwiseAnd@shape2:
   446                           	callstack 0
   447  000023                     RotateShape@shape:
   448                           	callstack 0
   449                           
   450                           ; 1 bytes @ 0x22
   451  000023                     	ds	1
   452  000024                     ??_GetBoard:
   453  000024                     SetBoard@v:
   454                           	callstack 0
   455  000024                     BitwiseAnd@shape1:
   456                           	callstack 0
   457                           
   458                           ; 1 bytes @ 0x23
   459  000024                     	ds	1
   460  000025                     ??_SetBoard:
   461                           
   462                           ; 1 bytes @ 0x24
   463  000025                     	ds	1
   464  000026                     GetBoard@x:
   465                           	callstack 0
   466                           
   467                           ; 1 bytes @ 0x25
   468  000026                     	ds	1
   469  000027                     GetBoard@col:
   470                           	callstack 0
   471                           
   472                           ; 1 bytes @ 0x26
   473  000027                     	ds	1
   474  000028                     GetQuartet@y:
   475                           	callstack 0
   476                           
   477                           ; 1 bytes @ 0x27
   478  000028                     	ds	1
   479  000029                     GetQuartet@shape:
   480                           	callstack 0
   481                           
   482                           ; 1 bytes @ 0x28
   483  000029                     	ds	1
   484  00002A                     ??_GetQuartet:
   485  00002A                     InitBoard@i:
   486                           	callstack 0
   487  00002A                     SetQuartet@y:
   488                           	callstack 0
   489                           
   490                           ; 1 bytes @ 0x29
   491  00002A                     	ds	1
   492  00002B                     InitBoard@j:
   493                           	callstack 0
   494  00002B                     SetQuartet@shape:
   495                           	callstack 0
   496                           
   497                           ; 1 bytes @ 0x2A
   498  00002B                     	ds	1
   499  00002C                     SetQuartet@x:
   500                           	callstack 0
   501                           
   502                           ; 1 bytes @ 0x2B
   503  00002C                     	ds	1
   504  00002D                     UpdateBoard@bq:
   505                           	callstack 0
   506  00002D                     IsColliding@dir1:
   507                           	callstack 0
   508  00002D                     Move@dir1:
   509                           	callstack 0
   510                           
   511                           ; 1 bytes @ 0x2C
   512  00002D                     	ds	1
   513  00002E                     ListenPortA@changedBits:
   514                           	callstack 0
   515                           
   516                           ; 1 bytes @ 0x2D
   517  00002E                     	ds	1
   518  00002F                     ListenPortA@currentPortA:
   519                           	callstack 0
   520                           
   521                           ; 1 bytes @ 0x2E
   522  00002F                     	ds	1
   523  000030                     
   524                           ; 1 bytes @ 0x2F
   525 ;;
   526 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   527 ;;
   528 ;; *************** function _main *****************
   529 ;; Defined at:
   530 ;;		line 474 in file "main.c"
   531 ;; Parameters:    Size  Location     Type
   532 ;;		None
   533 ;; Auto vars:     Size  Location     Type
   534 ;;		None
   535 ;; Return value:  Size  Location     Type
   536 ;;                  1    wreg      void 
   537 ;; Registers used:
   538 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : 0/0
   541 ;;		On exit  : 3F/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   548 ;;Total ram usage:        0 bytes
   549 ;; Hardware stack levels required when called:   10
   550 ;; This function calls:
   551 ;;		_InitBoard
   552 ;;		_InitInterrupts
   553 ;;		_InitTimers
   554 ;;		_Render
   555 ;;		_Update
   556 ;; This function is called by:
   557 ;;		Startup code after reset
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           	psect	text0
   562  001C5C                     __ptext0:
   563                           	callstack 0
   564  001C5C                     _main:
   565                           	callstack 21
   566                           
   567                           ;main.c: 476:     InitBoard();
   568                           
   569                           ;incstack = 0
   570  001C5C  EC50  F00C         	call	_InitBoard	;wreg free
   571                           
   572                           ;main.c: 477:     InitTimers();
   573  001C60  EC43  F00E         	call	_InitTimers	;wreg free
   574                           
   575                           ;main.c: 478:     InitInterrupts();
   576  001C64  EC4D  F00E         	call	_InitInterrupts	;wreg free
   577  001C68                     l2231:
   578                           
   579                           ;main.c: 481:     {;main.c: 482:         Update();
   580  001C68  EC60  F00E         	call	_Update	;wreg free
   581                           
   582                           ; BSR set to: 0
   583                           ;main.c: 483:         Render();
   584  001C6C  EC57  F00E         	call	_Render	;wreg free
   585  001C70  D7FB               	goto	l2231
   586  001C72                     __end_of_main:
   587                           	callstack 0
   588                           
   589 ;; *************** function _Update *****************
   590 ;; Defined at:
   591 ;;		line 212 in file "main.c"
   592 ;; Parameters:    Size  Location     Type
   593 ;;		None
   594 ;; Auto vars:     Size  Location     Type
   595 ;;		None
   596 ;; Return value:  Size  Location     Type
   597 ;;                  1    wreg      void 
   598 ;; Registers used:
   599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   600 ;; Tracked objects:
   601 ;;		On entry : 0/0
   602 ;;		On exit  : 3F/0
   603 ;;		Unchanged: 0/0
   604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   609 ;;Total ram usage:        0 bytes
   610 ;; Hardware stack levels used:    1
   611 ;; Hardware stack levels required when called:    9
   612 ;; This function calls:
   613 ;;		_ListenPortA
   614 ;;		_UpdateBoard
   615 ;; This function is called by:
   616 ;;		_main
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620                           	psect	text1
   621  001CC0                     __ptext1:
   622                           	callstack 0
   623  001CC0                     _Update:
   624                           	callstack 21
   625                           
   626                           ;main.c: 214:     ListenPortA();
   627                           
   628                           ; BSR set to: 0
   629                           ;incstack = 0
   630  001CC0  EC9C  F00C         	call	_ListenPortA	;wreg free
   631                           
   632                           ;main.c: 215:     UpdateBoard();
   633  001CC4  EC05  F00E         	call	_UpdateBoard	;wreg free
   634                           
   635                           ; BSR set to: 0
   636  001CC8  0012               	return		;funcret
   637  001CCA                     __end_of_Update:
   638                           	callstack 0
   639                           
   640 ;; *************** function _UpdateBoard *****************
   641 ;; Defined at:
   642 ;;		line 328 in file "main.c"
   643 ;; Parameters:    Size  Location     Type
   644 ;;		None
   645 ;; Auto vars:     Size  Location     Type
   646 ;;  bq              1   44[COMRAM] struct .
   647 ;; Return value:  Size  Location     Type
   648 ;;                  1    wreg      void 
   649 ;; Registers used:
   650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   651 ;; Tracked objects:
   652 ;;		On entry : 0/0
   653 ;;		On exit  : 3F/0
   654 ;;		Unchanged: 0/0
   655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   659 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   660 ;;Total ram usage:        1 bytes
   661 ;; Hardware stack levels used:    1
   662 ;; Hardware stack levels required when called:    7
   663 ;; This function calls:
   664 ;;		_GetQuartet
   665 ;;		_SetQuartet
   666 ;; This function is called by:
   667 ;;		_Update
   668 ;; This function uses a non-reentrant model
   669 ;;
   670                           
   671                           	psect	text2
   672  001C0A                     __ptext2:
   673                           	callstack 0
   674  001C0A                     _UpdateBoard:
   675                           	callstack 22
   676                           
   677                           ;main.c: 330:     Shape bq;;main.c: 331:     GetQuartet(curTet.x, curTet.y, &bq);
   678                           
   679                           ; BSR set to: 0
   680                           ;incstack = 0
   681  001C0A  C038  F028         	movff	_curTet+2,GetQuartet@y
   682  001C0E  0E2D               	movlw	low UpdateBoard@bq
   683  001C10  6E29               	movwf	GetQuartet@shape^0,c
   684  001C12  5037               	movf	(_curTet+1)^0,w,c
   685  001C14  ECDC  F008         	call	_GetQuartet
   686                           
   687                           ;main.c: 332:     bq.byte |= curTet.shape.byte;
   688  001C18  5039               	movf	(_curTet+3)^0,w,c
   689  001C1A  122D               	iorwf	UpdateBoard@bq^0,f,c
   690                           
   691                           ;main.c: 333:     SetQuartet(curTet.x, curTet.y, &bq);
   692  001C1C  C038  F02A         	movff	_curTet+2,SetQuartet@y
   693  001C20  0E2D               	movlw	low UpdateBoard@bq
   694  001C22  6E2B               	movwf	SetQuartet@shape^0,c
   695  001C24  5037               	movf	(_curTet+1)^0,w,c
   696  001C26  ECE4  F00C         	call	_SetQuartet
   697                           
   698                           ; BSR set to: 0
   699  001C2A  0012               	return		;funcret
   700  001C2C                     __end_of_UpdateBoard:
   701                           	callstack 0
   702                           
   703 ;; *************** function _ListenPortA *****************
   704 ;; Defined at:
   705 ;;		line 267 in file "main.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;		None
   708 ;; Auto vars:     Size  Location     Type
   709 ;;  currentPortA    1   46[COMRAM] unsigned char 
   710 ;;  changedBits     1   45[COMRAM] unsigned char 
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   721 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   723 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   724 ;;Total ram usage:        2 bytes
   725 ;; Hardware stack levels used:    1
   726 ;; Hardware stack levels required when called:    8
   727 ;; This function calls:
   728 ;;		_IsColliding
   729 ;;		_Move
   730 ;; This function is called by:
   731 ;;		_Update
   732 ;; This function uses a non-reentrant model
   733 ;;
   734                           
   735                           	psect	text3
   736  001938                     __ptext3:
   737                           	callstack 0
   738  001938                     _ListenPortA:
   739                           	callstack 21
   740                           
   741                           ;main.c: 270:     char currentPortA = PORTA;
   742                           
   743                           ; BSR set to: 0
   744                           ;incstack = 0
   745  001938  CF80 F02F          	movff	3968,ListenPortA@currentPortA	;volatile
   746                           
   747                           ;main.c: 272:     char changedBits = currentPortA ^ lastPortA;
   748  00193C  502F               	movf	ListenPortA@currentPortA^0,w,c
   749  00193E  183B               	xorwf	_lastPortA^0,w,c
   750  001940  6E2E               	movwf	ListenPortA@changedBits^0,c
   751                           
   752                           ;main.c: 275:     if (changedBits & (1 << 0))
   753  001942  B02E               	btfsc	ListenPortA@changedBits^0,0,c
   754                           
   755                           ;main.c: 276:     {;main.c: 277:         if (currentPortA & (1 << 0))
   756  001944  A02F               	btfss	ListenPortA@currentPortA^0,0,c
   757  001946  D00D               	goto	l2161
   758                           
   759                           ;main.c: 278:         {;main.c: 280:             if(!IsColliding(1, 0))
   760  001948  0E00               	movlw	0
   761  00194A  6E2D               	movwf	IsColliding@dir1^0,c
   762  00194C  0E01               	movlw	1
   763  00194E  EC44  F00B         	call	_IsColliding
   764  001952  0900               	iorlw	0
   765  001954  A4D8               	btfss	status,2,c
   766  001956  D005               	goto	l2161
   767                           
   768                           ; BSR set to: 0
   769                           ;main.c: 281:             {;main.c: 282:                 Move(1, 0);
   770  001958  0E00               	movlw	0
   771  00195A  6E2D               	movwf	Move@dir1^0,c
   772  00195C  0E01               	movlw	1
   773  00195E  ECAD  F00B         	call	_Move
   774  001962                     l2161:
   775                           
   776                           ;main.c: 287:     if (changedBits & (1 << 1))
   777  001962  B22E               	btfsc	ListenPortA@changedBits^0,1,c
   778                           
   779                           ;main.c: 288:     {;main.c: 289:         if (currentPortA & (1 << 1))
   780  001964  A22F               	btfss	ListenPortA@currentPortA^0,1,c
   781  001966  D00D               	goto	l2169
   782                           
   783                           ;main.c: 290:         {;main.c: 291:             if(!IsColliding(1, 1))
   784  001968  0E01               	movlw	1
   785  00196A  6E2D               	movwf	IsColliding@dir1^0,c
   786  00196C  0E01               	movlw	1
   787  00196E  EC44  F00B         	call	_IsColliding
   788  001972  0900               	iorlw	0
   789  001974  A4D8               	btfss	status,2,c
   790  001976  D005               	goto	l2169
   791                           
   792                           ; BSR set to: 0
   793                           ;main.c: 292:             {;main.c: 293:                 Move(1, 1);
   794  001978  0E01               	movlw	1
   795  00197A  6E2D               	movwf	Move@dir1^0,c
   796  00197C  0E01               	movlw	1
   797  00197E  ECAD  F00B         	call	_Move
   798  001982                     l2169:
   799                           
   800                           ;main.c: 298:     if (changedBits & (1 << 2))
   801  001982  B42E               	btfsc	ListenPortA@changedBits^0,2,c
   802                           
   803                           ;main.c: 299:     {;main.c: 300:         if (currentPortA & (1 << 2))
   804  001984  A42F               	btfss	ListenPortA@currentPortA^0,2,c
   805  001986  D00D               	goto	l2177
   806                           
   807                           ;main.c: 301:         {;main.c: 302:             if(!IsColliding(0, 1))
   808  001988  0E01               	movlw	1
   809  00198A  6E2D               	movwf	IsColliding@dir1^0,c
   810  00198C  0E00               	movlw	0
   811  00198E  EC44  F00B         	call	_IsColliding
   812  001992  0900               	iorlw	0
   813  001994  A4D8               	btfss	status,2,c
   814  001996  D005               	goto	l2177
   815                           
   816                           ; BSR set to: 0
   817                           ;main.c: 303:             {;main.c: 304:                 Move(0, 1);
   818  001998  0E01               	movlw	1
   819  00199A  6E2D               	movwf	Move@dir1^0,c
   820  00199C  0E00               	movlw	0
   821  00199E  ECAD  F00B         	call	_Move
   822  0019A2                     l2177:
   823                           
   824                           ;main.c: 309:     if (changedBits & (1 << 3))
   825  0019A2  B62E               	btfsc	ListenPortA@changedBits^0,3,c
   826                           
   827                           ;main.c: 310:     {;main.c: 311:         if (currentPortA & (1 << 3))
   828  0019A4  A62F               	btfss	ListenPortA@currentPortA^0,3,c
   829  0019A6  D00D               	goto	l2185
   830                           
   831                           ;main.c: 312:         {;main.c: 313:             if(!IsColliding(0, 0))
   832  0019A8  0E00               	movlw	0
   833  0019AA  6E2D               	movwf	IsColliding@dir1^0,c
   834  0019AC  0E00               	movlw	0
   835  0019AE  EC44  F00B         	call	_IsColliding
   836  0019B2  0900               	iorlw	0
   837  0019B4  A4D8               	btfss	status,2,c
   838  0019B6  D005               	goto	l2185
   839                           
   840                           ; BSR set to: 0
   841                           ;main.c: 314:             {;main.c: 315:                 Move(0, 0);
   842  0019B8  0E00               	movlw	0
   843  0019BA  6E2D               	movwf	Move@dir1^0,c
   844  0019BC  0E00               	movlw	0
   845  0019BE  ECAD  F00B         	call	_Move
   846  0019C2                     l2185:
   847                           
   848                           ;main.c: 321:     lastPortA = currentPortA;
   849  0019C2  C02F  F03B         	movff	ListenPortA@currentPortA,_lastPortA
   850  0019C6  0012               	return		;funcret
   851  0019C8                     __end_of_ListenPortA:
   852                           	callstack 0
   853                           
   854 ;; *************** function _Move *****************
   855 ;; Defined at:
   856 ;;		line 387 in file "main.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;  dir0            1    wreg     unsigned char 
   859 ;;  dir1            1   44[COMRAM] unsigned char 
   860 ;; Auto vars:     Size  Location     Type
   861 ;;  dir0            1   17[BANK0 ] unsigned char 
   862 ;;  curQuartet      1   18[BANK0 ] struct .
   863 ;; Return value:  Size  Location     Type
   864 ;;                  1    wreg      void 
   865 ;; Registers used:
   866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   867 ;; Tracked objects:
   868 ;;		On entry : 3F/0
   869 ;;		On exit  : 3F/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   872 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   873 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   875 ;;      Totals:         1      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   876 ;;Total ram usage:       11 bytes
   877 ;; Hardware stack levels used:    1
   878 ;; Hardware stack levels required when called:    7
   879 ;; This function calls:
   880 ;;		_GetQuartet
   881 ;;		_SetQuartet
   882 ;; This function is called by:
   883 ;;		_ListenPortA
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text4
   888  00175A                     __ptext4:
   889                           	callstack 0
   890  00175A                     _Move:
   891                           	callstack 21
   892                           
   893                           ;incstack = 0
   894                           ;Move@dir0 stored from wreg
   895  00175A  6F71               	movwf	Move@dir0& (0+255),b
   896                           
   897                           ;main.c: 387: void Move(char dir0, char dir1);main.c: 388: {;main.c: 389:     Shape curQ
      +                          uartet;;main.c: 390:     GetQuartet(curTet.x, curTet.y, &curQuartet);
   898  00175C  C038  F028         	movff	_curTet+2,GetQuartet@y
   899  001760  0E72               	movlw	low Move@curQuartet
   900  001762  6E29               	movwf	GetQuartet@shape^0,c
   901  001764  5037               	movf	(_curTet+1)^0,w,c
   902  001766  ECDC  F008         	call	_GetQuartet
   903                           
   904                           ;main.c: 393:     curQuartet.byte ^= curTet.shape.byte;
   905  00176A  5039               	movf	(_curTet+3)^0,w,c
   906  00176C  0100               	movlb	0	; () banked
   907  00176E  1B72               	xorwf	Move@curQuartet& (0+255),f,b
   908                           
   909                           ; BSR set to: 0
   910                           ;main.c: 394:     SetQuartet(curTet.x, curTet.y, &curQuartet);
   911  001770  C038  F02A         	movff	_curTet+2,SetQuartet@y
   912  001774  0E72               	movlw	low Move@curQuartet
   913  001776  6E2B               	movwf	SetQuartet@shape^0,c
   914  001778  5037               	movf	(_curTet+1)^0,w,c
   915  00177A  ECE4  F00C         	call	_SetQuartet
   916                           
   917                           ; BSR set to: 0
   918                           ;main.c: 396:     curTet.x = (dir1 == 0) ? ( dir0 == 0 ? curTet.x - 1 : curTet.x + 1) : 
      +                          curTet.x;
   919  00177E  502D               	movf	Move@dir1^0,w,c
   920  001780  B4D8               	btfsc	status,2,c
   921  001782  D004               	goto	l2125
   922                           
   923                           ; BSR set to: 0
   924  001784  C037  F069         	movff	_curTet+1,_Move$500
   925  001788  6B6A               	clrf	(_Move$500+1)& (0+255),b
   926  00178A  D013               	goto	l2133
   927  00178C                     l2125:
   928                           
   929                           ; BSR set to: 0
   930  00178C  5171               	movf	Move@dir0& (0+255),w,b
   931  00178E  B4D8               	btfsc	status,2,c
   932  001790  D006               	goto	l2129
   933                           
   934                           ; BSR set to: 0
   935  001792  0E01               	movlw	1
   936  001794  2437               	addwf	(_curTet+1)^0,w,c
   937  001796  6F6B               	movwf	_Move$501& (0+255),b
   938  001798  6B6C               	clrf	(_Move$501+1)& (0+255),b
   939  00179A  0E00               	movlw	0
   940  00179C  D005               	goto	L1
   941  00179E                     l2129:
   942                           
   943                           ; BSR set to: 0
   944  00179E  0EFF               	movlw	255
   945  0017A0  2437               	addwf	(_curTet+1)^0,w,c
   946  0017A2  6F6B               	movwf	_Move$501& (0+255),b
   947  0017A4  6B6C               	clrf	(_Move$501+1)& (0+255),b
   948  0017A6  0EFF               	movlw	255
   949  0017A8                     L1:
   950  0017A8  236C               	addwfc	(_Move$501+1)& (0+255),f,b
   951                           
   952                           ; BSR set to: 0
   953  0017AA  C06B  F069         	movff	_Move$501,_Move$500
   954  0017AE  C06C  F06A         	movff	_Move$501+1,_Move$500+1
   955  0017B2                     l2133:
   956                           
   957                           ; BSR set to: 0
   958  0017B2  C069  F037         	movff	_Move$500,_curTet+1
   959                           
   960                           ;main.c: 397:     curTet.y = (dir1 == 1) ? ( dir0 == 0 ? curTet.y + 1 : curTet.y - 1) : 
      +                          curTet.y;
   961  0017B6  042D               	decf	Move@dir1^0,w,c
   962  0017B8  B4D8               	btfsc	status,2,c
   963  0017BA  D004               	goto	l2137
   964                           
   965                           ; BSR set to: 0
   966  0017BC  C038  F06D         	movff	_curTet+2,_Move$502
   967  0017C0  6B6E               	clrf	(_Move$502+1)& (0+255),b
   968  0017C2  D013               	goto	l2145
   969  0017C4                     l2137:
   970                           
   971                           ; BSR set to: 0
   972  0017C4  5171               	movf	Move@dir0& (0+255),w,b
   973  0017C6  B4D8               	btfsc	status,2,c
   974  0017C8  D006               	goto	l2141
   975                           
   976                           ; BSR set to: 0
   977  0017CA  0EFF               	movlw	255
   978  0017CC  2438               	addwf	(_curTet+2)^0,w,c
   979  0017CE  6F6F               	movwf	_Move$503& (0+255),b
   980  0017D0  6B70               	clrf	(_Move$503+1)& (0+255),b
   981  0017D2  0EFF               	movlw	255
   982  0017D4  D005               	goto	L2
   983  0017D6                     l2141:
   984                           
   985                           ; BSR set to: 0
   986  0017D6  0E01               	movlw	1
   987  0017D8  2438               	addwf	(_curTet+2)^0,w,c
   988  0017DA  6F6F               	movwf	_Move$503& (0+255),b
   989  0017DC  6B70               	clrf	(_Move$503+1)& (0+255),b
   990  0017DE  0E00               	movlw	0
   991  0017E0                     L2:
   992  0017E0  2370               	addwfc	(_Move$503+1)& (0+255),f,b
   993                           
   994                           ; BSR set to: 0
   995  0017E2  C06F  F06D         	movff	_Move$503,_Move$502
   996  0017E6  C070  F06E         	movff	_Move$503+1,_Move$502+1
   997  0017EA                     l2145:
   998                           
   999                           ; BSR set to: 0
  1000  0017EA  C06D  F038         	movff	_Move$502,_curTet+2
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;main.c: 399:     SetQuartet(curTet.x, curTet.y, &curTet.shape);
  1004  0017EE  C038  F02A         	movff	_curTet+2,SetQuartet@y
  1005  0017F2  0E39               	movlw	low (_curTet+3)
  1006  0017F4  6E2B               	movwf	SetQuartet@shape^0,c
  1007  0017F6  5037               	movf	(_curTet+1)^0,w,c
  1008  0017F8  ECE4  F00C         	call	_SetQuartet
  1009                           
  1010                           ; BSR set to: 0
  1011  0017FC  0012               	return		;funcret
  1012  0017FE                     __end_of_Move:
  1013                           	callstack 0
  1014                           
  1015 ;; *************** function _IsColliding *****************
  1016 ;; Defined at:
  1017 ;;		line 366 in file "main.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;  dir0            1    wreg     unsigned char 
  1020 ;;  dir1            1   44[COMRAM] unsigned char 
  1021 ;; Auto vars:     Size  Location     Type
  1022 ;;  dir0            1   18[BANK0 ] unsigned char 
  1023 ;;  curQuartet      1   20[BANK0 ] struct .
  1024 ;;  shape           1   19[BANK0 ] struct .
  1025 ;;  returnVal       1    9[BANK0 ] unsigned char 
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      unsigned char 
  1028 ;; Registers used:
  1029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 3F/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1035 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1036 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1038 ;;      Totals:         1      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1039 ;;Total ram usage:       13 bytes
  1040 ;; Hardware stack levels used:    1
  1041 ;; Hardware stack levels required when called:    7
  1042 ;; This function calls:
  1043 ;;		_BitwiseAnd
  1044 ;;		_GetQuartet
  1045 ;;		_SetQuartet
  1046 ;; This function is called by:
  1047 ;;		_ListenPortA
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text5
  1052  001688                     __ptext5:
  1053                           	callstack 0
  1054  001688                     _IsColliding:
  1055                           	callstack 21
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;incstack = 0
  1059                           ;IsColliding@dir0 stored from wreg
  1060  001688  0100               	movlb	0	; () banked
  1061  00168A  6F72               	movwf	IsColliding@dir0& (0+255),b
  1062                           
  1063                           ;main.c: 366: char IsColliding(char dir0, char dir1);main.c: 367: {;main.c: 368:     Sha
      +                          pe shape, curQuartet;;main.c: 370:     GetQuartet(curTet.x, curTet.y, &curQuartet);
  1064  00168C  C038  F028         	movff	_curTet+2,GetQuartet@y
  1065  001690  0E74               	movlw	low IsColliding@curQuartet
  1066  001692  6E29               	movwf	GetQuartet@shape^0,c
  1067  001694  5037               	movf	(_curTet+1)^0,w,c
  1068  001696  ECDC  F008         	call	_GetQuartet
  1069                           
  1070                           ;main.c: 371:     curQuartet.byte ^= curTet.shape.byte;
  1071  00169A  5039               	movf	(_curTet+3)^0,w,c
  1072  00169C  0100               	movlb	0	; () banked
  1073  00169E  1B74               	xorwf	IsColliding@curQuartet& (0+255),f,b
  1074                           
  1075                           ; BSR set to: 0
  1076                           ;main.c: 372:     SetQuartet(curTet.x, curTet.y, &curQuartet);
  1077  0016A0  C038  F02A         	movff	_curTet+2,SetQuartet@y
  1078  0016A4  0E74               	movlw	low IsColliding@curQuartet
  1079  0016A6  6E2B               	movwf	SetQuartet@shape^0,c
  1080  0016A8  5037               	movf	(_curTet+1)^0,w,c
  1081  0016AA  ECE4  F00C         	call	_SetQuartet
  1082                           
  1083                           ;main.c: 374:     GetQuartet((dir1 == 0) ? ( dir0 == 0 ? curTet.x - 1 : curTet.x + 1) : 
      +                          curTet.x,
  1084  0016AE  042D               	decf	IsColliding@dir1^0,w,c
  1085  0016B0  B4D8               	btfsc	status,2,c
  1086  0016B2  D004               	goto	l2081
  1087                           
  1088                           ; BSR set to: 0
  1089  0016B4  C038  F06A         	movff	_curTet+2,_IsColliding$480
  1090  0016B8  6B6B               	clrf	(_IsColliding$480+1)& (0+255),b
  1091  0016BA  D013               	goto	l2089
  1092  0016BC                     l2081:
  1093                           
  1094                           ; BSR set to: 0
  1095  0016BC  5172               	movf	IsColliding@dir0& (0+255),w,b
  1096  0016BE  B4D8               	btfsc	status,2,c
  1097  0016C0  D006               	goto	l2085
  1098                           
  1099                           ; BSR set to: 0
  1100  0016C2  0EFF               	movlw	255
  1101  0016C4  2438               	addwf	(_curTet+2)^0,w,c
  1102  0016C6  6F6C               	movwf	_IsColliding$481& (0+255),b
  1103  0016C8  6B6D               	clrf	(_IsColliding$481+1)& (0+255),b
  1104  0016CA  0EFF               	movlw	255
  1105  0016CC  D005               	goto	L3
  1106  0016CE                     l2085:
  1107                           
  1108                           ; BSR set to: 0
  1109  0016CE  0E01               	movlw	1
  1110  0016D0  2438               	addwf	(_curTet+2)^0,w,c
  1111  0016D2  6F6C               	movwf	_IsColliding$481& (0+255),b
  1112  0016D4  6B6D               	clrf	(_IsColliding$481+1)& (0+255),b
  1113  0016D6  0E00               	movlw	0
  1114  0016D8                     L3:
  1115  0016D8  236D               	addwfc	(_IsColliding$481+1)& (0+255),f,b
  1116                           
  1117                           ; BSR set to: 0
  1118  0016DA  C06C  F06A         	movff	_IsColliding$481,_IsColliding$480
  1119  0016DE  C06D  F06B         	movff	_IsColliding$481+1,_IsColliding$480+1
  1120  0016E2                     l2089:
  1121                           
  1122                           ; BSR set to: 0
  1123  0016E2  502D               	movf	IsColliding@dir1^0,w,c
  1124  0016E4  B4D8               	btfsc	status,2,c
  1125  0016E6  D004               	goto	l2093
  1126                           
  1127                           ; BSR set to: 0
  1128  0016E8  C037  F06E         	movff	_curTet+1,_IsColliding$482
  1129  0016EC  6B6F               	clrf	(_IsColliding$482+1)& (0+255),b
  1130  0016EE  D013               	goto	l2101
  1131  0016F0                     l2093:
  1132                           
  1133                           ; BSR set to: 0
  1134  0016F0  5172               	movf	IsColliding@dir0& (0+255),w,b
  1135  0016F2  B4D8               	btfsc	status,2,c
  1136  0016F4  D006               	goto	l2097
  1137                           
  1138                           ; BSR set to: 0
  1139  0016F6  0E01               	movlw	1
  1140  0016F8  2437               	addwf	(_curTet+1)^0,w,c
  1141  0016FA  6F70               	movwf	_IsColliding$483& (0+255),b
  1142  0016FC  6B71               	clrf	(_IsColliding$483+1)& (0+255),b
  1143  0016FE  0E00               	movlw	0
  1144  001700  D005               	goto	L4
  1145  001702                     l2097:
  1146                           
  1147                           ; BSR set to: 0
  1148  001702  0EFF               	movlw	255
  1149  001704  2437               	addwf	(_curTet+1)^0,w,c
  1150  001706  6F70               	movwf	_IsColliding$483& (0+255),b
  1151  001708  6B71               	clrf	(_IsColliding$483+1)& (0+255),b
  1152  00170A  0EFF               	movlw	255
  1153  00170C                     L4:
  1154  00170C  2371               	addwfc	(_IsColliding$483+1)& (0+255),f,b
  1155                           
  1156                           ; BSR set to: 0
  1157  00170E  C070  F06E         	movff	_IsColliding$483,_IsColliding$482
  1158  001712  C071  F06F         	movff	_IsColliding$483+1,_IsColliding$482+1
  1159  001716                     l2101:
  1160                           
  1161                           ; BSR set to: 0
  1162  001716  C06A  F028         	movff	_IsColliding$480,GetQuartet@y
  1163  00171A  0E73               	movlw	low IsColliding@shape
  1164  00171C  6E29               	movwf	GetQuartet@shape^0,c
  1165  00171E  516E               	movf	_IsColliding$482& (0+255),w,b
  1166  001720  ECDC  F008         	call	_GetQuartet
  1167                           
  1168                           ;main.c: 378:     char returnVal = BitwiseAnd(shape, curTet.shape);
  1169  001724  C039  F023         	movff	_curTet+3,BitwiseAnd@shape2
  1170  001728  0100               	movlb	0	; () banked
  1171  00172A  5173               	movf	IsColliding@shape& (0+255),w,b
  1172  00172C  EC39  F00E         	call	_BitwiseAnd
  1173  001730  0100               	movlb	0	; () banked
  1174  001732  6F69               	movwf	IsColliding@returnVal& (0+255),b
  1175                           
  1176                           ; BSR set to: 0
  1177                           ;main.c: 380:     GetQuartet(curTet.x, curTet.y, &curQuartet);
  1178  001734  C038  F028         	movff	_curTet+2,GetQuartet@y
  1179  001738  0E74               	movlw	low IsColliding@curQuartet
  1180  00173A  6E29               	movwf	GetQuartet@shape^0,c
  1181  00173C  5037               	movf	(_curTet+1)^0,w,c
  1182  00173E  ECDC  F008         	call	_GetQuartet
  1183                           
  1184                           ;main.c: 381:     curQuartet.byte |= curTet.shape.byte;
  1185  001742  5039               	movf	(_curTet+3)^0,w,c
  1186  001744  0100               	movlb	0	; () banked
  1187  001746  1374               	iorwf	IsColliding@curQuartet& (0+255),f,b
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;main.c: 382:     SetQuartet(curTet.x, curTet.y, &curQuartet);
  1191  001748  C038  F02A         	movff	_curTet+2,SetQuartet@y
  1192  00174C  0E74               	movlw	low IsColliding@curQuartet
  1193  00174E  6E2B               	movwf	SetQuartet@shape^0,c
  1194  001750  5037               	movf	(_curTet+1)^0,w,c
  1195  001752  ECE4  F00C         	call	_SetQuartet
  1196                           
  1197                           ; BSR set to: 0
  1198                           ;main.c: 384:     return returnVal;
  1199  001756  5169               	movf	IsColliding@returnVal& (0+255),w,b
  1200                           
  1201                           ; BSR set to: 0
  1202  001758  0012               	return		;funcret
  1203  00175A                     __end_of_IsColliding:
  1204                           	callstack 0
  1205                           
  1206 ;; *************** function _SetQuartet *****************
  1207 ;; Defined at:
  1208 ;;		line 352 in file "main.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;  x               1    wreg     unsigned char 
  1211 ;;  y               1   41[COMRAM] unsigned char 
  1212 ;;  shape           1   42[COMRAM] PTR struct .
  1213 ;;		 -> Move@curQuartet(1), IsColliding@curQuartet(1), UpdateBoard@bq(1), curTet(4), 
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;  x               1   43[COMRAM] unsigned char 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 3F/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1225 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1228 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1229 ;;Total ram usage:        3 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    6
  1232 ;; This function calls:
  1233 ;;		_SetBoard
  1234 ;; This function is called by:
  1235 ;;		_UpdateBoard
  1236 ;;		_IsColliding
  1237 ;;		_Move
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           	psect	text6
  1242  0019C8                     __ptext6:
  1243                           	callstack 0
  1244  0019C8                     _SetQuartet:
  1245                           	callstack 22
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;incstack = 0
  1249                           ;SetQuartet@x stored from wreg
  1250  0019C8  6E2C               	movwf	SetQuartet@x^0,c
  1251                           
  1252                           ;main.c: 352: void SetQuartet(char x, char y, Shape *shape);main.c: 353: {;main.c: 354: 
      +                              SetBoard(x, y, (char) shape->b0);
  1253  0019CA  C02A  F023         	movff	SetQuartet@y,SetBoard@y
  1254  0019CE  502B               	movf	SetQuartet@shape^0,w,c
  1255  0019D0  6ED9               	movwf	fsr2l,c
  1256  0019D2  6ADA               	clrf	fsr2h,c
  1257  0019D4  0E00               	movlw	0
  1258  0019D6  BEDF               	btfsc	indf2,7,c
  1259  0019D8  0E01               	movlw	1
  1260  0019DA  6E24               	movwf	SetBoard@v^0,c
  1261  0019DC  502C               	movf	SetQuartet@x^0,w,c
  1262  0019DE  EC07  F008         	call	_SetBoard
  1263                           
  1264                           ;main.c: 355:     SetBoard(x + 1, y, (char) shape->b1);
  1265  0019E2  C02A  F023         	movff	SetQuartet@y,SetBoard@y
  1266  0019E6  502B               	movf	SetQuartet@shape^0,w,c
  1267  0019E8  6ED9               	movwf	fsr2l,c
  1268  0019EA  6ADA               	clrf	fsr2h,c
  1269  0019EC  0E00               	movlw	0
  1270  0019EE  BCDF               	btfsc	indf2,6,c
  1271  0019F0  0E01               	movlw	1
  1272  0019F2  6E24               	movwf	SetBoard@v^0,c
  1273  0019F4  282C               	incf	SetQuartet@x^0,w,c
  1274  0019F6  EC07  F008         	call	_SetBoard
  1275                           
  1276                           ;main.c: 356:     SetBoard(x + 1, y + 1, (char) shape->b2);
  1277  0019FA  282A               	incf	SetQuartet@y^0,w,c
  1278  0019FC  6E23               	movwf	SetBoard@y^0,c
  1279  0019FE  502B               	movf	SetQuartet@shape^0,w,c
  1280  001A00  6ED9               	movwf	fsr2l,c
  1281  001A02  6ADA               	clrf	fsr2h,c
  1282  001A04  0E00               	movlw	0
  1283  001A06  BADF               	btfsc	indf2,5,c
  1284  001A08  0E01               	movlw	1
  1285  001A0A  6E24               	movwf	SetBoard@v^0,c
  1286  001A0C  282C               	incf	SetQuartet@x^0,w,c
  1287  001A0E  EC07  F008         	call	_SetBoard
  1288                           
  1289                           ;main.c: 357:     SetBoard(x, y + 1, (char) shape->b3);
  1290  001A12  282A               	incf	SetQuartet@y^0,w,c
  1291  001A14  6E23               	movwf	SetBoard@y^0,c
  1292  001A16  502B               	movf	SetQuartet@shape^0,w,c
  1293  001A18  6ED9               	movwf	fsr2l,c
  1294  001A1A  6ADA               	clrf	fsr2h,c
  1295  001A1C  0E00               	movlw	0
  1296  001A1E  B8DF               	btfsc	indf2,4,c
  1297  001A20  0E01               	movlw	1
  1298  001A22  6E24               	movwf	SetBoard@v^0,c
  1299  001A24  502C               	movf	SetQuartet@x^0,w,c
  1300  001A26  EC07  F008         	call	_SetBoard
  1301                           
  1302                           ; BSR set to: 0
  1303  001A2A  0012               	return		;funcret
  1304  001A2C                     __end_of_SetQuartet:
  1305                           	callstack 0
  1306                           
  1307 ;; *************** function _GetQuartet *****************
  1308 ;; Defined at:
  1309 ;;		line 343 in file "main.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  x               1    wreg     unsigned char 
  1312 ;;  y               1   39[COMRAM] unsigned char 
  1313 ;;  shape           1   40[COMRAM] PTR struct .
  1314 ;;		 -> Move@curQuartet(1), IsColliding@shape(1), IsColliding@curQuartet(1), UpdateBoard@bq(1), 
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  x               1    8[BANK0 ] unsigned char 
  1317 ;; Return value:  Size  Location     Type
  1318 ;;                  1    wreg      void 
  1319 ;; Registers used:
  1320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1321 ;; Tracked objects:
  1322 ;;		On entry : 0/0
  1323 ;;		On exit  : 0/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1327 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1328 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1329 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1330 ;;Total ram usage:       13 bytes
  1331 ;; Hardware stack levels used:    1
  1332 ;; Hardware stack levels required when called:    6
  1333 ;; This function calls:
  1334 ;;		_GetBoard
  1335 ;; This function is called by:
  1336 ;;		_UpdateBoard
  1337 ;;		_IsColliding
  1338 ;;		_Move
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text7
  1343  0011B8                     __ptext7:
  1344                           	callstack 0
  1345  0011B8                     _GetQuartet:
  1346                           	callstack 22
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;incstack = 0
  1350                           ;GetQuartet@x stored from wreg
  1351  0011B8  0100               	movlb	0	; () banked
  1352  0011BA  6F68               	movwf	GetQuartet@x& (0+255),b
  1353                           
  1354                           ;main.c: 343: void GetQuartet(char x, char y, Shape *shape);main.c: 344: {;main.c: 345: 
      +                              shape->b0 = (x < 0 || x > 3 || y > 7 || y < 0) ? 1 : GetBoard(x, y);
  1355  0011BC  0E04               	movlw	4
  1356  0011BE  0100               	movlb	0	; () banked
  1357  0011C0  6168               	cpfslt	GetQuartet@x& (0+255),b
  1358  0011C2  D00E               	goto	l2029
  1359                           
  1360                           ; BSR set to: 0
  1361  0011C4  0E08               	movlw	8
  1362  0011C6  6028               	cpfslt	GetQuartet@y^0,c
  1363  0011C8  D00B               	goto	l2029
  1364                           
  1365                           ; BSR set to: 0
  1366  0011CA  C028  F023         	movff	GetQuartet@y,GetBoard@y
  1367  0011CE  5168               	movf	GetQuartet@x& (0+255),w,b
  1368  0011D0  EC48  F00D         	call	_GetBoard
  1369  0011D4  6E2A               	movwf	??_GetQuartet^0,c
  1370  0011D6  502A               	movf	??_GetQuartet^0,w,c
  1371  0011D8  0100               	movlb	0	; () banked
  1372  0011DA  6F60               	movwf	_GetQuartet$439& (0+255),b
  1373  0011DC  6B61               	clrf	(_GetQuartet$439+1)& (0+255),b
  1374  0011DE  D004               	goto	l2031
  1375  0011E0                     l2029:
  1376                           
  1377                           ; BSR set to: 0
  1378  0011E0  0E00               	movlw	0
  1379  0011E2  6F61               	movwf	(_GetQuartet$439+1)& (0+255),b
  1380  0011E4  0E01               	movlw	1
  1381  0011E6  6F60               	movwf	_GetQuartet$439& (0+255),b
  1382  0011E8                     l2031:
  1383                           
  1384                           ; BSR set to: 0
  1385  0011E8  5029               	movf	GetQuartet@shape^0,w,c
  1386  0011EA  6ED9               	movwf	fsr2l,c
  1387  0011EC  6ADA               	clrf	fsr2h,c
  1388  0011EE  B160               	btfsc	_GetQuartet$439& (0+255),0,b
  1389  0011F0  D002               	bra	u2045
  1390  0011F2  9EDF               	bcf	indf2,7,c
  1391  0011F4  D001               	bra	u2046
  1392  0011F6                     u2045:
  1393  0011F6  8EDF               	bsf	indf2,7,c
  1394  0011F8                     u2046:
  1395                           
  1396                           ;main.c: 346:     shape->b1 = (x + 1 < 0 || x + 1 > 3 || y > 7 || y < 0) ? 1 : GetBoard(
      +                          x + 1, y);
  1397  0011F8  0100               	movlb	0	; () banked
  1398  0011FA  5168               	movf	GetQuartet@x& (0+255),w,b
  1399  0011FC  6E2A               	movwf	??_GetQuartet^0,c
  1400  0011FE  6A2B               	clrf	(??_GetQuartet+1)^0,c
  1401  001200  0E01               	movlw	1
  1402  001202  242A               	addwf	??_GetQuartet^0,w,c
  1403  001204  0E00               	movlw	0
  1404  001206  202B               	addwfc	(??_GetQuartet+1)^0,w,c
  1405  001208  0B80               	andlw	128
  1406  00120A  A4D8               	btfss	status,2,c
  1407  00120C  D01D               	goto	l2041
  1408                           
  1409                           ; BSR set to: 0
  1410  00120E  5168               	movf	GetQuartet@x& (0+255),w,b
  1411  001210  6E2A               	movwf	??_GetQuartet^0,c
  1412  001212  6A2B               	clrf	(??_GetQuartet+1)^0,c
  1413  001214  0E01               	movlw	1
  1414  001216  262A               	addwf	??_GetQuartet^0,f,c
  1415  001218  0E00               	movlw	0
  1416  00121A  222B               	addwfc	(??_GetQuartet+1)^0,f,c
  1417  00121C  BE2B               	btfsc	(??_GetQuartet+1)^0,7,c
  1418  00121E  D006               	goto	u2060
  1419  001220  502B               	movf	(??_GetQuartet+1)^0,w,c
  1420  001222  E112               	bnz	l2041
  1421  001224  0E04               	movlw	4
  1422  001226  5C2A               	subwf	??_GetQuartet^0,w,c
  1423  001228  B0D8               	btfsc	status,0,c
  1424  00122A  D00E               	goto	l2041
  1425  00122C                     u2060:
  1426                           
  1427                           ; BSR set to: 0
  1428  00122C  0E08               	movlw	8
  1429  00122E  6028               	cpfslt	GetQuartet@y^0,c
  1430  001230  D00B               	goto	l2041
  1431                           
  1432                           ; BSR set to: 0
  1433  001232  C028  F023         	movff	GetQuartet@y,GetBoard@y
  1434  001236  2968               	incf	GetQuartet@x& (0+255),w,b
  1435  001238  EC48  F00D         	call	_GetBoard
  1436  00123C  6E2A               	movwf	??_GetQuartet^0,c
  1437  00123E  502A               	movf	??_GetQuartet^0,w,c
  1438  001240  0100               	movlb	0	; () banked
  1439  001242  6F62               	movwf	_GetQuartet$440& (0+255),b
  1440  001244  6B63               	clrf	(_GetQuartet$440+1)& (0+255),b
  1441  001246  D004               	goto	l2043
  1442  001248                     l2041:
  1443                           
  1444                           ; BSR set to: 0
  1445  001248  0E00               	movlw	0
  1446  00124A  6F63               	movwf	(_GetQuartet$440+1)& (0+255),b
  1447  00124C  0E01               	movlw	1
  1448  00124E  6F62               	movwf	_GetQuartet$440& (0+255),b
  1449  001250                     l2043:
  1450                           
  1451                           ; BSR set to: 0
  1452  001250  5029               	movf	GetQuartet@shape^0,w,c
  1453  001252  6ED9               	movwf	fsr2l,c
  1454  001254  6ADA               	clrf	fsr2h,c
  1455  001256  B162               	btfsc	_GetQuartet$440& (0+255),0,b
  1456  001258  D002               	bra	u2085
  1457  00125A  9CDF               	bcf	indf2,6,c
  1458  00125C  D001               	bra	u2086
  1459  00125E                     u2085:
  1460  00125E  8CDF               	bsf	indf2,6,c
  1461  001260                     u2086:
  1462                           
  1463                           ;main.c: 347:     shape->b2 = (x + 1 < 0 || x + 1 > 3 || y + 1 > 7 || y + 1 < 0) ? 1 : G
      +                          etBoard(x + 1, y + 1);
  1464  001260  0100               	movlb	0	; () banked
  1465  001262  5168               	movf	GetQuartet@x& (0+255),w,b
  1466  001264  6E2A               	movwf	??_GetQuartet^0,c
  1467  001266  6A2B               	clrf	(??_GetQuartet+1)^0,c
  1468  001268  0E01               	movlw	1
  1469  00126A  242A               	addwf	??_GetQuartet^0,w,c
  1470  00126C  0E00               	movlw	0
  1471  00126E  202B               	addwfc	(??_GetQuartet+1)^0,w,c
  1472  001270  0B80               	andlw	128
  1473  001272  A4D8               	btfss	status,2,c
  1474  001274  D033               	goto	l2055
  1475                           
  1476                           ; BSR set to: 0
  1477  001276  5168               	movf	GetQuartet@x& (0+255),w,b
  1478  001278  6E2A               	movwf	??_GetQuartet^0,c
  1479  00127A  6A2B               	clrf	(??_GetQuartet+1)^0,c
  1480  00127C  0E01               	movlw	1
  1481  00127E  262A               	addwf	??_GetQuartet^0,f,c
  1482  001280  0E00               	movlw	0
  1483  001282  222B               	addwfc	(??_GetQuartet+1)^0,f,c
  1484  001284  BE2B               	btfsc	(??_GetQuartet+1)^0,7,c
  1485  001286  D006               	goto	u2100
  1486  001288  502B               	movf	(??_GetQuartet+1)^0,w,c
  1487  00128A  E128               	bnz	l2055
  1488  00128C  0E04               	movlw	4
  1489  00128E  5C2A               	subwf	??_GetQuartet^0,w,c
  1490  001290  B0D8               	btfsc	status,0,c
  1491  001292  D024               	goto	l2055
  1492  001294                     u2100:
  1493                           
  1494                           ; BSR set to: 0
  1495  001294  5028               	movf	GetQuartet@y^0,w,c
  1496  001296  6E2A               	movwf	??_GetQuartet^0,c
  1497  001298  6A2B               	clrf	(??_GetQuartet+1)^0,c
  1498  00129A  0E01               	movlw	1
  1499  00129C  262A               	addwf	??_GetQuartet^0,f,c
  1500  00129E  0E00               	movlw	0
  1501  0012A0  222B               	addwfc	(??_GetQuartet+1)^0,f,c
  1502  0012A2  BE2B               	btfsc	(??_GetQuartet+1)^0,7,c
  1503  0012A4  D006               	goto	u2110
  1504  0012A6  502B               	movf	(??_GetQuartet+1)^0,w,c
  1505  0012A8  E119               	bnz	l2055
  1506  0012AA  0E08               	movlw	8
  1507  0012AC  5C2A               	subwf	??_GetQuartet^0,w,c
  1508  0012AE  B0D8               	btfsc	status,0,c
  1509  0012B0  D015               	goto	l2055
  1510  0012B2                     u2110:
  1511                           
  1512                           ; BSR set to: 0
  1513  0012B2  5028               	movf	GetQuartet@y^0,w,c
  1514  0012B4  6E2A               	movwf	??_GetQuartet^0,c
  1515  0012B6  6A2B               	clrf	(??_GetQuartet+1)^0,c
  1516  0012B8  0E01               	movlw	1
  1517  0012BA  242A               	addwf	??_GetQuartet^0,w,c
  1518  0012BC  0E00               	movlw	0
  1519  0012BE  202B               	addwfc	(??_GetQuartet+1)^0,w,c
  1520  0012C0  0B80               	andlw	128
  1521  0012C2  A4D8               	btfss	status,2,c
  1522  0012C4  D00B               	goto	l2055
  1523                           
  1524                           ; BSR set to: 0
  1525  0012C6  2828               	incf	GetQuartet@y^0,w,c
  1526  0012C8  6E23               	movwf	GetBoard@y^0,c
  1527  0012CA  2968               	incf	GetQuartet@x& (0+255),w,b
  1528  0012CC  EC48  F00D         	call	_GetBoard
  1529  0012D0  6E2A               	movwf	??_GetQuartet^0,c
  1530  0012D2  502A               	movf	??_GetQuartet^0,w,c
  1531  0012D4  0100               	movlb	0	; () banked
  1532  0012D6  6F64               	movwf	_GetQuartet$441& (0+255),b
  1533  0012D8  6B65               	clrf	(_GetQuartet$441+1)& (0+255),b
  1534  0012DA  D004               	goto	l2057
  1535  0012DC                     l2055:
  1536                           
  1537                           ; BSR set to: 0
  1538  0012DC  0E00               	movlw	0
  1539  0012DE  6F65               	movwf	(_GetQuartet$441+1)& (0+255),b
  1540  0012E0  0E01               	movlw	1
  1541  0012E2  6F64               	movwf	_GetQuartet$441& (0+255),b
  1542  0012E4                     l2057:
  1543                           
  1544                           ; BSR set to: 0
  1545  0012E4  5029               	movf	GetQuartet@shape^0,w,c
  1546  0012E6  6ED9               	movwf	fsr2l,c
  1547  0012E8  6ADA               	clrf	fsr2h,c
  1548  0012EA  B164               	btfsc	_GetQuartet$441& (0+255),0,b
  1549  0012EC  D002               	bra	u2135
  1550  0012EE  9ADF               	bcf	indf2,5,c
  1551  0012F0  D001               	bra	u2136
  1552  0012F2                     u2135:
  1553  0012F2  8ADF               	bsf	indf2,5,c
  1554  0012F4                     u2136:
  1555                           
  1556                           ;main.c: 348:     shape->b3 = (x < 0 || x > 3 || y + 1 > 7 || y + 1 < 0) ? 1 : GetBoard(
      +                          x, y + 1);
  1557  0012F4  0E04               	movlw	4
  1558  0012F6  0100               	movlb	0	; () banked
  1559  0012F8  6168               	cpfslt	GetQuartet@x& (0+255),b
  1560  0012FA  D024               	goto	l2067
  1561                           
  1562                           ; BSR set to: 0
  1563  0012FC  5028               	movf	GetQuartet@y^0,w,c
  1564  0012FE  6E2A               	movwf	??_GetQuartet^0,c
  1565  001300  6A2B               	clrf	(??_GetQuartet+1)^0,c
  1566  001302  0E01               	movlw	1
  1567  001304  262A               	addwf	??_GetQuartet^0,f,c
  1568  001306  0E00               	movlw	0
  1569  001308  222B               	addwfc	(??_GetQuartet+1)^0,f,c
  1570  00130A  BE2B               	btfsc	(??_GetQuartet+1)^0,7,c
  1571  00130C  D006               	goto	u2150
  1572  00130E  502B               	movf	(??_GetQuartet+1)^0,w,c
  1573  001310  E119               	bnz	l2067
  1574  001312  0E08               	movlw	8
  1575  001314  5C2A               	subwf	??_GetQuartet^0,w,c
  1576  001316  B0D8               	btfsc	status,0,c
  1577  001318  D015               	goto	l2067
  1578  00131A                     u2150:
  1579                           
  1580                           ; BSR set to: 0
  1581  00131A  5028               	movf	GetQuartet@y^0,w,c
  1582  00131C  6E2A               	movwf	??_GetQuartet^0,c
  1583  00131E  6A2B               	clrf	(??_GetQuartet+1)^0,c
  1584  001320  0E01               	movlw	1
  1585  001322  242A               	addwf	??_GetQuartet^0,w,c
  1586  001324  0E00               	movlw	0
  1587  001326  202B               	addwfc	(??_GetQuartet+1)^0,w,c
  1588  001328  0B80               	andlw	128
  1589  00132A  A4D8               	btfss	status,2,c
  1590  00132C  D00B               	goto	l2067
  1591                           
  1592                           ; BSR set to: 0
  1593  00132E  2828               	incf	GetQuartet@y^0,w,c
  1594  001330  6E23               	movwf	GetBoard@y^0,c
  1595  001332  5168               	movf	GetQuartet@x& (0+255),w,b
  1596  001334  EC48  F00D         	call	_GetBoard
  1597  001338  6E2A               	movwf	??_GetQuartet^0,c
  1598  00133A  502A               	movf	??_GetQuartet^0,w,c
  1599  00133C  0100               	movlb	0	; () banked
  1600  00133E  6F66               	movwf	_GetQuartet$442& (0+255),b
  1601  001340  6B67               	clrf	(_GetQuartet$442+1)& (0+255),b
  1602  001342  D004               	goto	l2069
  1603  001344                     l2067:
  1604                           
  1605                           ; BSR set to: 0
  1606  001344  0E00               	movlw	0
  1607  001346  6F67               	movwf	(_GetQuartet$442+1)& (0+255),b
  1608  001348  0E01               	movlw	1
  1609  00134A  6F66               	movwf	_GetQuartet$442& (0+255),b
  1610  00134C                     l2069:
  1611                           
  1612                           ; BSR set to: 0
  1613  00134C  5029               	movf	GetQuartet@shape^0,w,c
  1614  00134E  6ED9               	movwf	fsr2l,c
  1615  001350  6ADA               	clrf	fsr2h,c
  1616  001352  B166               	btfsc	_GetQuartet$442& (0+255),0,b
  1617  001354  D002               	bra	u2175
  1618  001356  98DF               	bcf	indf2,4,c
  1619  001358  D001               	bra	u2176
  1620  00135A                     u2175:
  1621  00135A  88DF               	bsf	indf2,4,c
  1622  00135C                     u2176:
  1623  00135C  0012               	return		;funcret
  1624  00135E                     __end_of_GetQuartet:
  1625                           	callstack 0
  1626                           
  1627 ;; *************** function _GetBoard *****************
  1628 ;; Defined at:
  1629 ;;		line 245 in file "main.c"
  1630 ;; Parameters:    Size  Location     Type
  1631 ;;  x               1    wreg     unsigned char 
  1632 ;;  y               1   34[COMRAM] unsigned char 
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;  x               1   37[COMRAM] unsigned char 
  1635 ;;  col             1   38[COMRAM] unsigned char 
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      unsigned char 
  1638 ;; Registers used:
  1639 ;;		wreg, status,2, status,0
  1640 ;; Tracked objects:
  1641 ;;		On entry : 3F/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1645 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;Total ram usage:        5 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    5
  1652 ;; This function calls:
  1653 ;;		Nothing
  1654 ;; This function is called by:
  1655 ;;		_GetQuartet
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text8
  1660  001A90                     __ptext8:
  1661                           	callstack 0
  1662  001A90                     _GetBoard:
  1663                           	callstack 22
  1664                           
  1665                           ;incstack = 0
  1666                           ;GetBoard@x stored from wreg
  1667  001A90  6E26               	movwf	GetBoard@x^0,c
  1668                           
  1669                           ;main.c: 245: char GetBoard(char x, char y);main.c: 246: {;main.c: 247:     char col;;ma
      +                          in.c: 248:     switch (x)
  1670  001A92  D00C               	goto	l2013
  1671  001A94                     l128:
  1672                           
  1673                           ;main.c: 251:             col = board.col0;
  1674  001A94  C030  F027         	movff	_board,GetBoard@col
  1675                           
  1676                           ;main.c: 252:             break;
  1677  001A98  D01D               	goto	l2015
  1678  001A9A                     l130:
  1679                           
  1680                           ;main.c: 254:             col = board.col1;
  1681  001A9A  C031  F027         	movff	_board+1,GetBoard@col
  1682                           
  1683                           ;main.c: 255:             break;
  1684  001A9E  D01A               	goto	l2015
  1685  001AA0                     l131:
  1686                           
  1687                           ;main.c: 257:             col = board.col2;
  1688  001AA0  C032  F027         	movff	_board+2,GetBoard@col
  1689                           
  1690                           ;main.c: 258:             break;
  1691  001AA4  D017               	goto	l2015
  1692  001AA6                     l132:
  1693                           
  1694                           ;main.c: 260:             col = board.col3;
  1695  001AA6  C033  F027         	movff	_board+3,GetBoard@col
  1696                           
  1697                           ;main.c: 261:             break;
  1698  001AAA  D014               	goto	l2015
  1699  001AAC                     l2013:
  1700  001AAC  5026               	movf	GetBoard@x^0,w,c
  1701  001AAE  6E24               	movwf	??_GetBoard^0,c
  1702  001AB0  6A25               	clrf	(??_GetBoard+1)^0,c
  1703                           
  1704                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1705                           ; Switch size 1, requested type "simple"
  1706                           ; Number of cases is 1, Range of values is 0 to 0
  1707                           ; switch strategies available:
  1708                           ; Name         Instructions Cycles
  1709                           ; simple_byte            4     3 (average)
  1710                           ;	Chosen strategy is simple_byte
  1711  001AB2  5025               	movf	(??_GetBoard+1)^0,w,c
  1712  001AB4  0A00               	xorlw	0	; case 0
  1713  001AB6  A4D8               	btfss	status,2,c
  1714  001AB8  D00D               	goto	l2015
  1715                           
  1716                           ; Switch size 1, requested type "simple"
  1717                           ; Number of cases is 4, Range of values is 0 to 3
  1718                           ; switch strategies available:
  1719                           ; Name         Instructions Cycles
  1720                           ; simple_byte           13     7 (average)
  1721                           ;	Chosen strategy is simple_byte
  1722  001ABA  5024               	movf	??_GetBoard^0,w,c
  1723  001ABC  0A00               	xorlw	0	; case 0
  1724  001ABE  B4D8               	btfsc	status,2,c
  1725  001AC0  D7E9               	goto	l128
  1726  001AC2  0A01               	xorlw	1	; case 1
  1727  001AC4  B4D8               	btfsc	status,2,c
  1728  001AC6  D7E9               	goto	l130
  1729  001AC8  0A03               	xorlw	3	; case 2
  1730  001ACA  B4D8               	btfsc	status,2,c
  1731  001ACC  D7E9               	goto	l131
  1732  001ACE  0A01               	xorlw	1	; case 3
  1733  001AD0  B4D8               	btfsc	status,2,c
  1734  001AD2  D7E9               	goto	l132
  1735  001AD4                     l2015:
  1736                           
  1737                           ;main.c: 264:     return ((col >> y) & 0x01);
  1738  001AD4  C023  F024         	movff	GetBoard@y,??_GetBoard
  1739  001AD8  C027  F025         	movff	GetBoard@col,??_GetBoard+1
  1740  001ADC  2A24               	incf	??_GetBoard^0,f,c
  1741  001ADE  D002               	goto	u2014
  1742  001AE0                     u2015:
  1743  001AE0  90D8               	bcf	status,0,c
  1744  001AE2  3225               	rrcf	(??_GetBoard+1)^0,f,c
  1745  001AE4                     u2014:
  1746  001AE4  2E24               	decfsz	??_GetBoard^0,f,c
  1747  001AE6  D7FC               	goto	u2015
  1748  001AE8  5025               	movf	(??_GetBoard+1)^0,w,c
  1749  001AEA  0B01               	andlw	1
  1750  001AEC  0012               	return		;funcret
  1751  001AEE                     __end_of_GetBoard:
  1752                           	callstack 0
  1753                           
  1754 ;; *************** function _BitwiseAnd *****************
  1755 ;; Defined at:
  1756 ;;		line 337 in file "main.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  shape1          1    wreg     struct .
  1759 ;;  shape2          1   34[COMRAM] struct .
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;  shape1          1   35[COMRAM] struct .
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      unsigned char 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0
  1766 ;; Tracked objects:
  1767 ;;		On entry : 3F/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1771 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1775 ;;Total ram usage:        2 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    5
  1778 ;; This function calls:
  1779 ;;		Nothing
  1780 ;; This function is called by:
  1781 ;;		_IsColliding
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           	psect	text9
  1786  001C72                     __ptext9:
  1787                           	callstack 0
  1788  001C72                     _BitwiseAnd:
  1789                           	callstack 22
  1790                           
  1791                           ;incstack = 0
  1792                           ;BitwiseAnd@shape1 stored from wreg
  1793  001C72  6E24               	movwf	BitwiseAnd@shape1^0,c
  1794                           
  1795                           ;main.c: 337: char BitwiseAnd(Shape shape1, Shape shape2);main.c: 338: {;main.c: 339:   
      +                            return ((shape1.byte & shape2.byte) > 0);
  1796  001C74  5024               	movf	BitwiseAnd@shape1^0,w,c
  1797  001C76  1423               	andwf	BitwiseAnd@shape2^0,w,c
  1798  001C78  0900               	iorlw	0
  1799  001C7A  B4D8               	btfsc	status,2,c
  1800  001C7C  D002               	goto	u1240
  1801  001C7E  0E01               	movlw	1
  1802  001C80  0012               	return	
  1803  001C82                     u1240:
  1804  001C82  0E00               	movlw	0
  1805  001C84  0012               	return		;funcret
  1806  001C86                     __end_of_BitwiseAnd:
  1807                           	callstack 0
  1808                           
  1809 ;; *************** function _Render *****************
  1810 ;; Defined at:
  1811 ;;		line 218 in file "main.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;		None
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;		None
  1816 ;; Return value:  Size  Location     Type
  1817 ;;                  1    wreg      void 
  1818 ;; Registers used:
  1819 ;;		None
  1820 ;; Tracked objects:
  1821 ;;		On entry : 3F/0
  1822 ;;		On exit  : 3F/0
  1823 ;;		Unchanged: 3F/0
  1824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;Total ram usage:        0 bytes
  1830 ;; Hardware stack levels used:    1
  1831 ;; Hardware stack levels required when called:    5
  1832 ;; This function calls:
  1833 ;;		Nothing
  1834 ;; This function is called by:
  1835 ;;		_main
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text10
  1840  001CAE                     __ptext10:
  1841                           	callstack 0
  1842  001CAE                     _Render:
  1843                           	callstack 25
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;main.c: 220:     LATC = board.col0;
  1847                           
  1848                           ;incstack = 0
  1849  001CAE  C030  FF8B         	movff	_board,3979	;volatile
  1850                           
  1851                           ;main.c: 221:     LATD = board.col1;
  1852  001CB2  C031  FF8C         	movff	_board+1,3980	;volatile
  1853                           
  1854                           ;main.c: 222:     LATE = board.col2;
  1855  001CB6  C032  FF8D         	movff	_board+2,3981	;volatile
  1856                           
  1857                           ;main.c: 223:     LATF = board.col3;
  1858  001CBA  C033  FF8E         	movff	_board+3,3982	;volatile
  1859                           
  1860                           ; BSR set to: 0
  1861  001CBE  0012               	return		;funcret
  1862  001CC0                     __end_of_Render:
  1863                           	callstack 0
  1864                           
  1865 ;; *************** function _InitTimers *****************
  1866 ;; Defined at:
  1867 ;;		line 185 in file "main.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      void 
  1874 ;; Registers used:
  1875 ;;		wreg, status,2, status,0
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;Total ram usage:        0 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:    5
  1888 ;; This function calls:
  1889 ;;		Nothing
  1890 ;; This function is called by:
  1891 ;;		_main
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           	psect	text11
  1896  001C86                     __ptext11:
  1897                           	callstack 0
  1898  001C86                     _InitTimers:
  1899                           	callstack 25
  1900                           
  1901                           ;main.c: 187:     T0CON = 0x00;
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;incstack = 0
  1905  001C86  0E00               	movlw	0
  1906  001C88  6ED5               	movwf	213,c	;volatile
  1907                           
  1908                           ;main.c: 189:     T0CON |= 0x05;
  1909  001C8A  0E05               	movlw	5
  1910  001C8C  12D5               	iorwf	213,f,c	;volatile
  1911                           
  1912                           ;main.c: 190:     TMR0H = 0x67;
  1913  001C8E  0E67               	movlw	103
  1914  001C90  6ED7               	movwf	215,c	;volatile
  1915                           
  1916                           ;main.c: 191:     TMR0L = 0x69;
  1917  001C92  0E69               	movlw	105
  1918  001C94  6ED6               	movwf	214,c	;volatile
  1919                           
  1920                           ;main.c: 193:     T0CONbits.TMR0ON = 1;
  1921  001C96  8ED5               	bsf	213,7,c	;volatile
  1922  001C98  0012               	return		;funcret
  1923  001C9A                     __end_of_InitTimers:
  1924                           	callstack 0
  1925                           
  1926 ;; *************** function _InitInterrupts *****************
  1927 ;; Defined at:
  1928 ;;		line 196 in file "main.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;		None
  1931 ;; Auto vars:     Size  Location     Type
  1932 ;;		None
  1933 ;; Return value:  Size  Location     Type
  1934 ;;                  1    wreg      void 
  1935 ;; Registers used:
  1936 ;;		wreg, status,2, status,0
  1937 ;; Tracked objects:
  1938 ;;		On entry : 0/0
  1939 ;;		On exit  : 0/0
  1940 ;;		Unchanged: 0/0
  1941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;Total ram usage:        0 bytes
  1947 ;; Hardware stack levels used:    1
  1948 ;; Hardware stack levels required when called:    5
  1949 ;; This function calls:
  1950 ;;		Nothing
  1951 ;; This function is called by:
  1952 ;;		_main
  1953 ;; This function uses a non-reentrant model
  1954 ;;
  1955                           
  1956                           	psect	text12
  1957  001C9A                     __ptext12:
  1958                           	callstack 0
  1959  001C9A                     _InitInterrupts:
  1960                           	callstack 25
  1961                           
  1962                           ;main.c: 200:     INTCON &= 0b00000111;
  1963                           
  1964                           ;incstack = 0
  1965  001C9A  0E07               	movlw	7
  1966  001C9C  16F2               	andwf	242,f,c	;volatile
  1967                           
  1968                           ;main.c: 202:     RCONbits.IPEN = 0;
  1969  001C9E  9ED0               	bcf	208,7,c	;volatile
  1970                           
  1971                           ;main.c: 204:     INTCONbits.GIE = 1;
  1972  001CA0  8EF2               	bsf	242,7,c	;volatile
  1973                           
  1974                           ;main.c: 205:     INTCONbits.PEIE = 0;
  1975  001CA2  9CF2               	bcf	242,6,c	;volatile
  1976                           
  1977                           ;main.c: 206:     INTCONbits.TMR0IE = 1;
  1978  001CA4  8AF2               	bsf	242,5,c	;volatile
  1979                           
  1980                           ;main.c: 207:     INTCONbits.RBIE = 1;
  1981  001CA6  86F2               	bsf	242,3,c	;volatile
  1982                           
  1983                           ;main.c: 209:     TRISB = 0b01100000;
  1984  001CA8  0E60               	movlw	96
  1985  001CAA  6E93               	movwf	147,c	;volatile
  1986  001CAC  0012               	return		;funcret
  1987  001CAE                     __end_of_InitInterrupts:
  1988                           	callstack 0
  1989                           
  1990 ;; *************** function _InitBoard *****************
  1991 ;; Defined at:
  1992 ;;		line 144 in file "main.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;		None
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;  j               1   42[COMRAM] unsigned char 
  1997 ;;  i               1   41[COMRAM] unsigned char 
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  1    wreg      void 
  2000 ;; Registers used:
  2001 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2011 ;;Total ram usage:        2 bytes
  2012 ;; Hardware stack levels used:    1
  2013 ;; Hardware stack levels required when called:    6
  2014 ;; This function calls:
  2015 ;;		_RotateShape
  2016 ;;		_SetBoard
  2017 ;; This function is called by:
  2018 ;;		_main
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           	psect	text13
  2023  0018A0                     __ptext13:
  2024                           	callstack 0
  2025  0018A0                     _InitBoard:
  2026                           	callstack 24
  2027                           
  2028                           ;main.c: 146:     ADCON1 = 0x0F;
  2029                           
  2030                           ;incstack = 0
  2031  0018A0  0E0F               	movlw	15
  2032  0018A2  6EC1               	movwf	193,c	;volatile
  2033                           
  2034                           ;main.c: 149:     PORTA = 0x00;
  2035  0018A4  0E00               	movlw	0
  2036  0018A6  6E80               	movwf	128,c	;volatile
  2037                           
  2038                           ;main.c: 150:     LATA = 0x00;
  2039  0018A8  0E00               	movlw	0
  2040  0018AA  6E89               	movwf	137,c	;volatile
  2041                           
  2042                           ;main.c: 151:     TRISA = 0b00001111;
  2043  0018AC  0E0F               	movlw	15
  2044  0018AE  6E92               	movwf	146,c	;volatile
  2045                           
  2046                           ;main.c: 152:     lastPortA = PORTA;
  2047  0018B0  CF80 F03B          	movff	3968,_lastPortA	;volatile
  2048                           
  2049                           ;main.c: 155:     PORTB = 0x00;
  2050  0018B4  0E00               	movlw	0
  2051  0018B6  6E81               	movwf	129,c	;volatile
  2052                           
  2053                           ;main.c: 156:     LATB = 0x00;
  2054  0018B8  0E00               	movlw	0
  2055  0018BA  6E8A               	movwf	138,c	;volatile
  2056                           
  2057                           ;main.c: 157:     TRISB = 0b01100000;
  2058  0018BC  0E60               	movlw	96
  2059  0018BE  6E93               	movwf	147,c	;volatile
  2060                           
  2061                           ;main.c: 158:     lastPortB = PORTB;
  2062  0018C0  CF81 F03A          	movff	3969,_lastPortB	;volatile
  2063                           
  2064                           ;main.c: 161:     LATC = 0x00;
  2065  0018C4  0E00               	movlw	0
  2066  0018C6  6E8B               	movwf	139,c	;volatile
  2067                           
  2068                           ;main.c: 162:     LATD = 0x00;
  2069  0018C8  0E00               	movlw	0
  2070  0018CA  6E8C               	movwf	140,c	;volatile
  2071                           
  2072                           ;main.c: 163:     LATE = 0x00;
  2073  0018CC  0E00               	movlw	0
  2074  0018CE  6E8D               	movwf	141,c	;volatile
  2075                           
  2076                           ;main.c: 164:     LATF = 0x00;
  2077  0018D0  0E00               	movlw	0
  2078  0018D2  6E8E               	movwf	142,c	;volatile
  2079                           
  2080                           ;main.c: 167:     TRISC = 0x00;
  2081  0018D4  0E00               	movlw	0
  2082  0018D6  6E94               	movwf	148,c	;volatile
  2083                           
  2084                           ;main.c: 168:     TRISD = 0x00;
  2085  0018D8  0E00               	movlw	0
  2086  0018DA  6E95               	movwf	149,c	;volatile
  2087                           
  2088                           ;main.c: 169:     TRISE = 0x00;
  2089  0018DC  0E00               	movlw	0
  2090  0018DE  6E96               	movwf	150,c	;volatile
  2091                           
  2092                           ;main.c: 170:     TRISF = 0x00;
  2093  0018E0  0E00               	movlw	0
  2094  0018E2  6E97               	movwf	151,c	;volatile
  2095                           
  2096                           ;main.c: 172:     for (char i = 0; i < 8; i++)
  2097  0018E4  0E00               	movlw	0
  2098  0018E6  6E2A               	movwf	InitBoard@i^0,c
  2099  0018E8                     l2203:
  2100                           
  2101                           ;main.c: 173:     {;main.c: 174:         for (char j = 0; j < 4; j++)
  2102  0018E8  0E00               	movlw	0
  2103  0018EA  6E2B               	movwf	InitBoard@j^0,c
  2104  0018EC                     l2209:
  2105                           
  2106                           ;main.c: 175:         {;main.c: 176:             SetBoard(j, i, 0);
  2107  0018EC  C02A  F023         	movff	InitBoard@i,SetBoard@y
  2108  0018F0  0E00               	movlw	0
  2109  0018F2  6E24               	movwf	SetBoard@v^0,c
  2110  0018F4  502B               	movf	InitBoard@j^0,w,c
  2111  0018F6  EC07  F008         	call	_SetBoard
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;main.c: 177:         }
  2115  0018FA  2A2B               	incf	InitBoard@j^0,f,c
  2116                           
  2117                           ; BSR set to: 0
  2118  0018FC  0E03               	movlw	3
  2119  0018FE  642B               	cpfsgt	InitBoard@j^0,c
  2120  001900  D7F5               	goto	l2209
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;main.c: 178:     }
  2124  001902  2A2A               	incf	InitBoard@i^0,f,c
  2125                           
  2126                           ; BSR set to: 0
  2127  001904  0E07               	movlw	7
  2128  001906  642A               	cpfsgt	InitBoard@i^0,c
  2129  001908  D7EF               	goto	l2203
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;main.c: 181:     curTet = L;
  2133  00190A  0E01               	movlw	low _L
  2134  00190C  6EF6               	movwf	tblptrl,c
  2135  00190E                     	if	1	;There is more than 1 active tblptr byte
  2136  00190E  0E10               	movlw	high _L
  2137  001910  6EF7               	movwf	tblptrh,c
  2138  001912                     	endif
  2139  001912                     	if	1	;There are 3 active tblptr bytes
  2140  001912  0E00               	movlw	low (_L shr (0+16))
  2141  001914  6EF8               	movwf	tblptru,c
  2142  001916                     	endif
  2143  001916  0009               	tblrd		*+
  2144  001918  CFF5 F036          	movff	tablat,_curTet
  2145  00191C  0009               	tblrd		*+
  2146  00191E  CFF5 F037          	movff	tablat,_curTet+1
  2147  001922  0009               	tblrd		*+
  2148  001924  CFF5 F038          	movff	tablat,_curTet+2
  2149  001928  000A               	tblrd		*-
  2150  00192A  CFF5 F039          	movff	tablat,_curTet+3
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;main.c: 182:     RotateShape(&curTet.shape);
  2154  00192E  0E39               	movlw	low (_curTet+3)
  2155  001930  6E23               	movwf	RotateShape@shape^0,c
  2156  001932  ECC8  F00D         	call	_RotateShape	;wreg free
  2157  001936  0012               	return		;funcret
  2158  001938                     __end_of_InitBoard:
  2159                           	callstack 0
  2160                           
  2161 ;; *************** function _SetBoard *****************
  2162 ;; Defined at:
  2163 ;;		line 226 in file "main.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;  x               1    wreg     unsigned char 
  2166 ;;  y               1   34[COMRAM] unsigned char 
  2167 ;;  v               1   35[COMRAM] unsigned char 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  x               1    0[BANK0 ] unsigned char 
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, status,2, status,0
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 3F/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2179 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;      Totals:         7       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;Total ram usage:       16 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; Hardware stack levels required when called:    5
  2186 ;; This function calls:
  2187 ;;		Nothing
  2188 ;; This function is called by:
  2189 ;;		_InitBoard
  2190 ;;		_SetQuartet
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text14
  2195  00100E                     __ptext14:
  2196                           	callstack 0
  2197  00100E                     _SetBoard:
  2198                           	callstack 22
  2199                           
  2200                           ;incstack = 0
  2201                           ;SetBoard@x stored from wreg
  2202  00100E  0100               	movlb	0	; () banked
  2203  001010  6F60               	movwf	SetBoard@x& (0+255),b
  2204                           
  2205                           ;main.c: 226: void SetBoard(char x, char y, char v);main.c: 227: {;main.c: 228:     swit
      +                          ch (x)
  2206  001012  D0BC               	goto	l2001
  2207  001014                     l1967:
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;main.c: 231:             board.col0 = v == 1 ? board.col0 | (v << y) : board.col0 & ~(1
      +                           << y);
  2211  001014  0424               	decf	SetBoard@v^0,w,c
  2212  001016  B4D8               	btfsc	status,2,c
  2213  001018  D013               	goto	l1971
  2214                           
  2215                           ; BSR set to: 0
  2216  00101A  C023  F025         	movff	SetBoard@y,??_SetBoard
  2217  00101E  0E01               	movlw	1
  2218  001020  6E26               	movwf	(??_SetBoard+1)^0,c
  2219  001022  2A25               	incf	??_SetBoard^0,f,c
  2220  001024  D002               	goto	u1904
  2221  001026                     u1905:
  2222  001026  90D8               	bcf	status,0,c
  2223  001028  3626               	rlcf	(??_SetBoard+1)^0,f,c
  2224  00102A                     u1904:
  2225  00102A  2E25               	decfsz	??_SetBoard^0,f,c
  2226  00102C  D7FC               	goto	u1905
  2227  00102E  5026               	movf	(??_SetBoard+1)^0,w,c
  2228  001030  0AFF               	xorlw	255
  2229  001032  1430               	andwf	_board^0,w,c
  2230  001034  6E27               	movwf	(??_SetBoard+2)^0,c
  2231  001036  5027               	movf	(??_SetBoard+2)^0,w,c
  2232  001038  0100               	movlb	0	; () banked
  2233  00103A  6F61               	movwf	_SetBoard$380& (0+255),b
  2234  00103C  6B62               	clrf	(_SetBoard$380+1)& (0+255),b
  2235  00103E  D016               	goto	l1973
  2236  001040                     l1971:
  2237                           
  2238                           ; BSR set to: 0
  2239  001040  C023  F025         	movff	SetBoard@y,??_SetBoard
  2240  001044  5024               	movf	SetBoard@v^0,w,c
  2241  001046  6E26               	movwf	(??_SetBoard+1)^0,c
  2242  001048  6A27               	clrf	(??_SetBoard+2)^0,c
  2243  00104A  2A25               	incf	??_SetBoard^0,f,c
  2244  00104C  D003               	goto	u1914
  2245  00104E                     u1915:
  2246  00104E  90D8               	bcf	status,0,c
  2247  001050  3626               	rlcf	(??_SetBoard+1)^0,f,c
  2248  001052  3627               	rlcf	(??_SetBoard+2)^0,f,c
  2249  001054                     u1914:
  2250  001054  2E25               	decfsz	??_SetBoard^0,f,c
  2251  001056  D7FB               	goto	u1915
  2252  001058  5030               	movf	_board^0,w,c
  2253  00105A  6E28               	movwf	(??_SetBoard+3)^0,c
  2254  00105C  6A29               	clrf	(??_SetBoard+4)^0,c
  2255  00105E  5026               	movf	(??_SetBoard+1)^0,w,c
  2256  001060  1028               	iorwf	(??_SetBoard+3)^0,w,c
  2257  001062  0100               	movlb	0	; () banked
  2258  001064  6F61               	movwf	_SetBoard$380& (0+255),b
  2259  001066  5027               	movf	(??_SetBoard+2)^0,w,c
  2260  001068  1029               	iorwf	(??_SetBoard+4)^0,w,c
  2261  00106A  6F62               	movwf	(_SetBoard$380+1)& (0+255),b
  2262  00106C                     l1973:
  2263                           
  2264                           ; BSR set to: 0
  2265  00106C  C061  F030         	movff	_SetBoard$380,_board
  2266                           
  2267                           ;main.c: 232:             break;
  2268  001070  0012               	return	
  2269  001072                     l1975:
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;main.c: 234:             board.col1 = v == 1 ? board.col1 | (v << y) : board.col1 & ~(1
      +                           << y);
  2273  001072  0424               	decf	SetBoard@v^0,w,c
  2274  001074  B4D8               	btfsc	status,2,c
  2275  001076  D013               	goto	l1979
  2276                           
  2277                           ; BSR set to: 0
  2278  001078  C023  F025         	movff	SetBoard@y,??_SetBoard
  2279  00107C  0E01               	movlw	1
  2280  00107E  6E26               	movwf	(??_SetBoard+1)^0,c
  2281  001080  2A25               	incf	??_SetBoard^0,f,c
  2282  001082  D002               	goto	u1934
  2283  001084                     u1935:
  2284  001084  90D8               	bcf	status,0,c
  2285  001086  3626               	rlcf	(??_SetBoard+1)^0,f,c
  2286  001088                     u1934:
  2287  001088  2E25               	decfsz	??_SetBoard^0,f,c
  2288  00108A  D7FC               	goto	u1935
  2289  00108C  5026               	movf	(??_SetBoard+1)^0,w,c
  2290  00108E  0AFF               	xorlw	255
  2291  001090  1431               	andwf	(_board+1)^0,w,c
  2292  001092  6E27               	movwf	(??_SetBoard+2)^0,c
  2293  001094  5027               	movf	(??_SetBoard+2)^0,w,c
  2294  001096  0100               	movlb	0	; () banked
  2295  001098  6F63               	movwf	_SetBoard$381& (0+255),b
  2296  00109A  6B64               	clrf	(_SetBoard$381+1)& (0+255),b
  2297  00109C  D016               	goto	l1981
  2298  00109E                     l1979:
  2299                           
  2300                           ; BSR set to: 0
  2301  00109E  C023  F025         	movff	SetBoard@y,??_SetBoard
  2302  0010A2  5024               	movf	SetBoard@v^0,w,c
  2303  0010A4  6E26               	movwf	(??_SetBoard+1)^0,c
  2304  0010A6  6A27               	clrf	(??_SetBoard+2)^0,c
  2305  0010A8  2A25               	incf	??_SetBoard^0,f,c
  2306  0010AA  D003               	goto	u1944
  2307  0010AC                     u1945:
  2308  0010AC  90D8               	bcf	status,0,c
  2309  0010AE  3626               	rlcf	(??_SetBoard+1)^0,f,c
  2310  0010B0  3627               	rlcf	(??_SetBoard+2)^0,f,c
  2311  0010B2                     u1944:
  2312  0010B2  2E25               	decfsz	??_SetBoard^0,f,c
  2313  0010B4  D7FB               	goto	u1945
  2314  0010B6  5031               	movf	(_board+1)^0,w,c
  2315  0010B8  6E28               	movwf	(??_SetBoard+3)^0,c
  2316  0010BA  6A29               	clrf	(??_SetBoard+4)^0,c
  2317  0010BC  5026               	movf	(??_SetBoard+1)^0,w,c
  2318  0010BE  1028               	iorwf	(??_SetBoard+3)^0,w,c
  2319  0010C0  0100               	movlb	0	; () banked
  2320  0010C2  6F63               	movwf	_SetBoard$381& (0+255),b
  2321  0010C4  5027               	movf	(??_SetBoard+2)^0,w,c
  2322  0010C6  1029               	iorwf	(??_SetBoard+4)^0,w,c
  2323  0010C8  6F64               	movwf	(_SetBoard$381+1)& (0+255),b
  2324  0010CA                     l1981:
  2325                           
  2326                           ; BSR set to: 0
  2327  0010CA  C063  F031         	movff	_SetBoard$381,_board+1
  2328                           
  2329                           ;main.c: 235:             break;
  2330  0010CE  0012               	return	
  2331  0010D0                     l1983:
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;main.c: 237:             board.col2 = v == 1 ? board.col2 | (v << y) : board.col2 & ~(1
      +                           << y);
  2335  0010D0  0424               	decf	SetBoard@v^0,w,c
  2336  0010D2  B4D8               	btfsc	status,2,c
  2337  0010D4  D013               	goto	l1987
  2338                           
  2339                           ; BSR set to: 0
  2340  0010D6  C023  F025         	movff	SetBoard@y,??_SetBoard
  2341  0010DA  0E01               	movlw	1
  2342  0010DC  6E26               	movwf	(??_SetBoard+1)^0,c
  2343  0010DE  2A25               	incf	??_SetBoard^0,f,c
  2344  0010E0  D002               	goto	u1964
  2345  0010E2                     u1965:
  2346  0010E2  90D8               	bcf	status,0,c
  2347  0010E4  3626               	rlcf	(??_SetBoard+1)^0,f,c
  2348  0010E6                     u1964:
  2349  0010E6  2E25               	decfsz	??_SetBoard^0,f,c
  2350  0010E8  D7FC               	goto	u1965
  2351  0010EA  5026               	movf	(??_SetBoard+1)^0,w,c
  2352  0010EC  0AFF               	xorlw	255
  2353  0010EE  1432               	andwf	(_board+2)^0,w,c
  2354  0010F0  6E27               	movwf	(??_SetBoard+2)^0,c
  2355  0010F2  5027               	movf	(??_SetBoard+2)^0,w,c
  2356  0010F4  0100               	movlb	0	; () banked
  2357  0010F6  6F65               	movwf	_SetBoard$382& (0+255),b
  2358  0010F8  6B66               	clrf	(_SetBoard$382+1)& (0+255),b
  2359  0010FA  D016               	goto	l1989
  2360  0010FC                     l1987:
  2361                           
  2362                           ; BSR set to: 0
  2363  0010FC  C023  F025         	movff	SetBoard@y,??_SetBoard
  2364  001100  5024               	movf	SetBoard@v^0,w,c
  2365  001102  6E26               	movwf	(??_SetBoard+1)^0,c
  2366  001104  6A27               	clrf	(??_SetBoard+2)^0,c
  2367  001106  2A25               	incf	??_SetBoard^0,f,c
  2368  001108  D003               	goto	u1974
  2369  00110A                     u1975:
  2370  00110A  90D8               	bcf	status,0,c
  2371  00110C  3626               	rlcf	(??_SetBoard+1)^0,f,c
  2372  00110E  3627               	rlcf	(??_SetBoard+2)^0,f,c
  2373  001110                     u1974:
  2374  001110  2E25               	decfsz	??_SetBoard^0,f,c
  2375  001112  D7FB               	goto	u1975
  2376  001114  5032               	movf	(_board+2)^0,w,c
  2377  001116  6E28               	movwf	(??_SetBoard+3)^0,c
  2378  001118  6A29               	clrf	(??_SetBoard+4)^0,c
  2379  00111A  5026               	movf	(??_SetBoard+1)^0,w,c
  2380  00111C  1028               	iorwf	(??_SetBoard+3)^0,w,c
  2381  00111E  0100               	movlb	0	; () banked
  2382  001120  6F65               	movwf	_SetBoard$382& (0+255),b
  2383  001122  5027               	movf	(??_SetBoard+2)^0,w,c
  2384  001124  1029               	iorwf	(??_SetBoard+4)^0,w,c
  2385  001126  6F66               	movwf	(_SetBoard$382+1)& (0+255),b
  2386  001128                     l1989:
  2387                           
  2388                           ; BSR set to: 0
  2389  001128  C065  F032         	movff	_SetBoard$382,_board+2
  2390                           
  2391                           ;main.c: 238:             break;
  2392  00112C  0012               	return	
  2393  00112E                     l1991:
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;main.c: 240:             board.col3 = v == 1 ? board.col3 | (v << y) : board.col3 & ~(1
      +                           << y);
  2397  00112E  0424               	decf	SetBoard@v^0,w,c
  2398  001130  B4D8               	btfsc	status,2,c
  2399  001132  D013               	goto	l1995
  2400                           
  2401                           ; BSR set to: 0
  2402  001134  C023  F025         	movff	SetBoard@y,??_SetBoard
  2403  001138  0E01               	movlw	1
  2404  00113A  6E26               	movwf	(??_SetBoard+1)^0,c
  2405  00113C  2A25               	incf	??_SetBoard^0,f,c
  2406  00113E  D002               	goto	u1994
  2407  001140                     u1995:
  2408  001140  90D8               	bcf	status,0,c
  2409  001142  3626               	rlcf	(??_SetBoard+1)^0,f,c
  2410  001144                     u1994:
  2411  001144  2E25               	decfsz	??_SetBoard^0,f,c
  2412  001146  D7FC               	goto	u1995
  2413  001148  5026               	movf	(??_SetBoard+1)^0,w,c
  2414  00114A  0AFF               	xorlw	255
  2415  00114C  1433               	andwf	(_board+3)^0,w,c
  2416  00114E  6E27               	movwf	(??_SetBoard+2)^0,c
  2417  001150  5027               	movf	(??_SetBoard+2)^0,w,c
  2418  001152  0100               	movlb	0	; () banked
  2419  001154  6F67               	movwf	_SetBoard$383& (0+255),b
  2420  001156  6B68               	clrf	(_SetBoard$383+1)& (0+255),b
  2421  001158  D016               	goto	l1997
  2422  00115A                     l1995:
  2423                           
  2424                           ; BSR set to: 0
  2425  00115A  C023  F025         	movff	SetBoard@y,??_SetBoard
  2426  00115E  5024               	movf	SetBoard@v^0,w,c
  2427  001160  6E26               	movwf	(??_SetBoard+1)^0,c
  2428  001162  6A27               	clrf	(??_SetBoard+2)^0,c
  2429  001164  2A25               	incf	??_SetBoard^0,f,c
  2430  001166  D003               	goto	u2004
  2431  001168                     u2005:
  2432  001168  90D8               	bcf	status,0,c
  2433  00116A  3626               	rlcf	(??_SetBoard+1)^0,f,c
  2434  00116C  3627               	rlcf	(??_SetBoard+2)^0,f,c
  2435  00116E                     u2004:
  2436  00116E  2E25               	decfsz	??_SetBoard^0,f,c
  2437  001170  D7FB               	goto	u2005
  2438  001172  5033               	movf	(_board+3)^0,w,c
  2439  001174  6E28               	movwf	(??_SetBoard+3)^0,c
  2440  001176  6A29               	clrf	(??_SetBoard+4)^0,c
  2441  001178  5026               	movf	(??_SetBoard+1)^0,w,c
  2442  00117A  1028               	iorwf	(??_SetBoard+3)^0,w,c
  2443  00117C  0100               	movlb	0	; () banked
  2444  00117E  6F67               	movwf	_SetBoard$383& (0+255),b
  2445  001180  5027               	movf	(??_SetBoard+2)^0,w,c
  2446  001182  1029               	iorwf	(??_SetBoard+4)^0,w,c
  2447  001184  6F68               	movwf	(_SetBoard$383+1)& (0+255),b
  2448  001186                     l1997:
  2449                           
  2450                           ; BSR set to: 0
  2451  001186  C067  F033         	movff	_SetBoard$383,_board+3
  2452                           
  2453                           ;main.c: 241:             break;
  2454  00118A  0012               	return	
  2455  00118C                     l2001:
  2456  00118C  0100               	movlb	0	; () banked
  2457  00118E  5160               	movf	SetBoard@x& (0+255),w,b
  2458  001190  6E25               	movwf	??_SetBoard^0,c
  2459  001192  6A26               	clrf	(??_SetBoard+1)^0,c
  2460                           
  2461                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2462                           ; Switch size 1, requested type "simple"
  2463                           ; Number of cases is 1, Range of values is 0 to 0
  2464                           ; switch strategies available:
  2465                           ; Name         Instructions Cycles
  2466                           ; simple_byte            4     3 (average)
  2467                           ;	Chosen strategy is simple_byte
  2468  001194  5026               	movf	(??_SetBoard+1)^0,w,c
  2469  001196  0A00               	xorlw	0	; case 0
  2470  001198  A4D8               	btfss	status,2,c
  2471  00119A  0012               	return	
  2472                           
  2473                           ; BSR set to: 0
  2474                           ; Switch size 1, requested type "simple"
  2475                           ; Number of cases is 4, Range of values is 0 to 3
  2476                           ; switch strategies available:
  2477                           ; Name         Instructions Cycles
  2478                           ; simple_byte           13     7 (average)
  2479                           ;	Chosen strategy is simple_byte
  2480  00119C  5025               	movf	??_SetBoard^0,w,c
  2481  00119E  0A00               	xorlw	0	; case 0
  2482  0011A0  B4D8               	btfsc	status,2,c
  2483  0011A2  D738               	goto	l1967
  2484  0011A4  0A01               	xorlw	1	; case 1
  2485  0011A6  B4D8               	btfsc	status,2,c
  2486  0011A8  D764               	goto	l1975
  2487  0011AA  0A03               	xorlw	3	; case 2
  2488  0011AC  B4D8               	btfsc	status,2,c
  2489  0011AE  D790               	goto	l1983
  2490  0011B0  0A01               	xorlw	1	; case 3
  2491  0011B2  A4D8               	btfss	status,2,c
  2492  0011B4  0012               	return	
  2493  0011B6  D7BB               	goto	l1991
  2494  0011B8                     __end_of_SetBoard:
  2495                           	callstack 0
  2496                           
  2497 ;; *************** function _RotateShape *****************
  2498 ;; Defined at:
  2499 ;;		line 402 in file "main.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  shape           1   34[COMRAM] PTR struct .
  2502 ;;		 -> curTet(4), 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;		None
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2509 ;; Tracked objects:
  2510 ;;		On entry : 3F/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2514 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2517 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2518 ;;Total ram usage:        1 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    5
  2521 ;; This function calls:
  2522 ;;		Nothing
  2523 ;; This function is called by:
  2524 ;;		_InitBoard
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           	psect	text15
  2529  001B90                     __ptext15:
  2530                           	callstack 0
  2531  001B90                     _RotateShape:
  2532                           	callstack 24
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;main.c: 402: void RotateShape(Shape *shape);main.c: 403: {;main.c: 404:     shape->byte
      +                           >>= 1;
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;incstack = 0
  2539  001B90  5023               	movf	RotateShape@shape^0,w,c
  2540  001B92  6ED9               	movwf	fsr2l,c
  2541  001B94  6ADA               	clrf	fsr2h,c
  2542  001B96  90D8               	bcf	status,0,c
  2543  001B98  32DF               	rrcf	indf2,f,c
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;main.c: 405:     shape->b0 = shape->r3;
  2547  001B9A  5023               	movf	RotateShape@shape^0,w,c
  2548  001B9C  6ED9               	movwf	fsr2l,c
  2549  001B9E  6ADA               	clrf	fsr2h,c
  2550  001BA0  5023               	movf	RotateShape@shape^0,w,c
  2551  001BA2  6EE1               	movwf	fsr1l,c
  2552  001BA4  6AE2               	clrf	fsr1h,c
  2553  001BA6  B6DF               	btfsc	indf2,3,c
  2554  001BA8  D002               	bra	u1635
  2555  001BAA  9EE7               	bcf	indf1,7,c
  2556  001BAC  D001               	bra	u1636
  2557  001BAE                     u1635:
  2558  001BAE  8EE7               	bsf	indf1,7,c
  2559  001BB0                     u1636:
  2560                           
  2561                           ;main.c: 406:     shape->r3 = 0;
  2562  001BB0  5023               	movf	RotateShape@shape^0,w,c
  2563  001BB2  6ED9               	movwf	fsr2l,c
  2564  001BB4  6ADA               	clrf	fsr2h,c
  2565  001BB6  96DF               	bcf	indf2,3,c
  2566  001BB8  0012               	return		;funcret
  2567  001BBA                     __end_of_RotateShape:
  2568                           	callstack 0
  2569                           
  2570 ;; *************** function _HandleInterrupt *****************
  2571 ;; Defined at:
  2572 ;;		line 414 in file "main.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;		None
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;		None
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  1    wreg      void 
  2579 ;; Registers used:
  2580 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2588 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2589 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2590 ;;Total ram usage:        4 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    4
  2593 ;; This function calls:
  2594 ;;		_HandlePortB
  2595 ;;		_HandleTimer
  2596 ;; This function is called by:
  2597 ;;		Interrupt level 2
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           	psect	intcode
  2602  000008                     __pintcode:
  2603                           	callstack 0
  2604  000008                     _HandleInterrupt:
  2605                           	callstack 21
  2606                           
  2607                           ;incstack = 0
  2608  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2609  00000A  EDA6  F00D         	call	int_func,f	;refresh shadow registers
  2610                           
  2611                           	psect	intcode_body
  2612  001B4C                     __pintcode_body:
  2613                           	callstack 21
  2614  001B4C                     int_func:
  2615                           	callstack 21
  2616  001B4C  0006               	pop		; remove dummy address from shadow register refresh
  2617  001B4E  CFE1 F01F          	movff	fsr1l,??_HandleInterrupt
  2618  001B52  CFE2 F020          	movff	fsr1h,??_HandleInterrupt+1
  2619  001B56  CFD9 F021          	movff	fsr2l,??_HandleInterrupt+2
  2620  001B5A  CFDA F022          	movff	fsr2h,??_HandleInterrupt+3
  2621                           
  2622                           ;main.c: 416:     if (INTCONbits.TMR0IF)
  2623  001B5E  A4F2               	btfss	242,2,c	;volatile
  2624  001B60  D008               	goto	i2l222
  2625                           
  2626                           ;main.c: 417:     {;main.c: 418:         HandleTimer();
  2627  001B62  EC16  F00E         	call	_HandleTimer	;wreg free
  2628                           
  2629                           ;main.c: 419:         INTCONbits.TMR0IF = 0;
  2630  001B66  94F2               	bcf	242,2,c	;volatile
  2631                           
  2632                           ;main.c: 421:         TMR0H = 0x67;
  2633  001B68  0E67               	movlw	103
  2634  001B6A  6ED7               	movwf	215,c	;volatile
  2635                           
  2636                           ;main.c: 422:         TMR0L = 0x69;
  2637  001B6C  0E69               	movlw	105
  2638  001B6E  6ED6               	movwf	214,c	;volatile
  2639                           
  2640                           ;main.c: 423:     }
  2641  001B70  D005               	goto	i2l225
  2642  001B72                     i2l222:
  2643  001B72  A0F2               	btfss	242,0,c	;volatile
  2644  001B74  D003               	goto	i2l225
  2645                           
  2646                           ;main.c: 425:     {;main.c: 426:         HandlePortB();
  2647  001B76  ECF2  F00D         	call	_HandlePortB	;wreg free
  2648                           
  2649                           ;main.c: 427:         INTCONbits.RBIF = 0;
  2650  001B7A  90F2               	bcf	242,0,c	;volatile
  2651  001B7C                     i2l225:
  2652  001B7C  C022  FFDA         	movff	??_HandleInterrupt+3,fsr2h
  2653  001B80  C021  FFD9         	movff	??_HandleInterrupt+2,fsr2l
  2654  001B84  C020  FFE2         	movff	??_HandleInterrupt+1,fsr1h
  2655  001B88  C01F  FFE1         	movff	??_HandleInterrupt,fsr1l
  2656  001B8C  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2657  001B8E  0011               	retfie		f
  2658  001B90                     __end_of_HandleInterrupt:
  2659                           	callstack 0
  2660                           
  2661 ;; *************** function _HandleTimer *****************
  2662 ;; Defined at:
  2663 ;;		line 431 in file "main.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;		None
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;		None
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  1    wreg      void 
  2670 ;; Registers used:
  2671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;Total ram usage:        0 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    3
  2684 ;; This function calls:
  2685 ;;		i2_Move
  2686 ;; This function is called by:
  2687 ;;		_HandleInterrupt
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           	psect	text17
  2692  001C2C                     __ptext17:
  2693                           	callstack 0
  2694  001C2C                     _HandleTimer:
  2695                           	callstack 21
  2696                           
  2697                           ;main.c: 433:     static char counter = 0;;main.c: 435:     if (++counter == 8)
  2698                           
  2699                           ;incstack = 0
  2700  001C2C  2A34               	incf	HandleTimer@counter^0,f,c
  2701  001C2E  0E08               	movlw	8
  2702  001C30  1834               	xorwf	HandleTimer@counter^0,w,c
  2703  001C32  A4D8               	btfss	status,2,c
  2704  001C34  0012               	return	
  2705                           
  2706                           ;main.c: 436:     {;main.c: 437:         Move(0, 1);
  2707  001C36  0E01               	movlw	1
  2708  001C38  6E14               	movwf	i2Move@dir1^0,c
  2709  001C3A  0E00               	movlw	0
  2710  001C3C  ECFF  F00B         	call	i2_Move
  2711                           
  2712                           ;main.c: 438:         counter = 0;
  2713  001C40  0E00               	movlw	0
  2714  001C42  6E34               	movwf	HandleTimer@counter^0,c
  2715  001C44  0012               	return		;funcret
  2716  001C46                     __end_of_HandleTimer:
  2717                           	callstack 0
  2718                           
  2719 ;; *************** function i2_Move *****************
  2720 ;; Defined at:
  2721 ;;		line 387 in file "main.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;  dir0            1    wreg     unsigned char 
  2724 ;;  dir1            1   19[COMRAM] unsigned char 
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;  dir0            1   28[COMRAM] unsigned char 
  2727 ;;  curQuartet      1   29[COMRAM] struct .
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2737 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;Total ram usage:       11 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:    2
  2744 ;; This function calls:
  2745 ;;		i2_GetQuartet
  2746 ;;		i2_SetQuartet
  2747 ;; This function is called by:
  2748 ;;		_HandleTimer
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           	psect	text18
  2753  0017FE                     __ptext18:
  2754                           	callstack 0
  2755  0017FE                     i2_Move:
  2756                           	callstack 21
  2757                           
  2758                           ;incstack = 0
  2759                           ;i2Move@dir0 stored from wreg
  2760  0017FE  6E1D               	movwf	i2Move@dir0^0,c
  2761                           
  2762                           ;main.c: 387: void Move(char dir0, char dir1);main.c: 388: {;main.c: 389:     Shape curQ
      +                          uartet;;main.c: 390:     GetQuartet(curTet.x, curTet.y, &curQuartet);
  2763  001800  C038  F006         	movff	_curTet+2,i2GetQuartet@y
  2764  001804  0E1E               	movlw	low i2Move@curQuartet
  2765  001806  6E07               	movwf	i2GetQuartet@shape^0,c
  2766  001808  5037               	movf	(_curTet+1)^0,w,c
  2767  00180A  EC7A  F00A         	call	i2_GetQuartet
  2768                           
  2769                           ;main.c: 393:     curQuartet.byte ^= curTet.shape.byte;
  2770  00180E  5039               	movf	(_curTet+3)^0,w,c
  2771  001810  1A1E               	xorwf	i2Move@curQuartet^0,f,c
  2772                           
  2773                           ;main.c: 394:     SetQuartet(curTet.x, curTet.y, &curQuartet);
  2774  001812  C038  F011         	movff	_curTet+2,i2SetQuartet@y
  2775  001816  0E1E               	movlw	low i2Move@curQuartet
  2776  001818  6E12               	movwf	i2SetQuartet@shape^0,c
  2777  00181A  5037               	movf	(_curTet+1)^0,w,c
  2778  00181C  EC16  F00D         	call	i2_SetQuartet
  2779                           
  2780                           ;main.c: 396:     curTet.x = (dir1 == 0) ? ( dir0 == 0 ? curTet.x - 1 : curTet.x + 1) : 
      +                          curTet.x;
  2781  001820  5014               	movf	i2Move@dir1^0,w,c
  2782  001822  B4D8               	btfsc	status,2,c
  2783  001824  D004               	goto	i2l1777
  2784  001826  C037  F015         	movff	_curTet+1,i2_Move$500
  2785  00182A  6A16               	clrf	(i2_Move$500+1)^0,c
  2786  00182C  D013               	goto	i2l1785
  2787  00182E                     i2l1777:
  2788  00182E  501D               	movf	i2Move@dir0^0,w,c
  2789  001830  B4D8               	btfsc	status,2,c
  2790  001832  D006               	goto	i2l1781
  2791  001834  0E01               	movlw	1
  2792  001836  2437               	addwf	(_curTet+1)^0,w,c
  2793  001838  6E17               	movwf	i2_Move$501^0,c
  2794  00183A  6A18               	clrf	(i2_Move$501+1)^0,c
  2795  00183C  0E00               	movlw	0
  2796  00183E  D005               	goto	L5
  2797  001840                     i2l1781:
  2798  001840  0EFF               	movlw	255
  2799  001842  2437               	addwf	(_curTet+1)^0,w,c
  2800  001844  6E17               	movwf	i2_Move$501^0,c
  2801  001846  6A18               	clrf	(i2_Move$501+1)^0,c
  2802  001848  0EFF               	movlw	255
  2803  00184A                     L5:
  2804  00184A  2218               	addwfc	(i2_Move$501+1)^0,f,c
  2805  00184C  C017  F015         	movff	i2_Move$501,i2_Move$500
  2806  001850  C018  F016         	movff	i2_Move$501+1,i2_Move$500+1
  2807  001854                     i2l1785:
  2808  001854  C015  F037         	movff	i2_Move$500,_curTet+1
  2809                           
  2810                           ;main.c: 397:     curTet.y = (dir1 == 1) ? ( dir0 == 0 ? curTet.y + 1 : curTet.y - 1) : 
      +                          curTet.y;
  2811  001858  0414               	decf	i2Move@dir1^0,w,c
  2812  00185A  B4D8               	btfsc	status,2,c
  2813  00185C  D004               	goto	i2l1789
  2814  00185E  C038  F019         	movff	_curTet+2,i2_Move$502
  2815  001862  6A1A               	clrf	(i2_Move$502+1)^0,c
  2816  001864  D013               	goto	i2l1797
  2817  001866                     i2l1789:
  2818  001866  501D               	movf	i2Move@dir0^0,w,c
  2819  001868  B4D8               	btfsc	status,2,c
  2820  00186A  D006               	goto	i2l1793
  2821  00186C  0EFF               	movlw	255
  2822  00186E  2438               	addwf	(_curTet+2)^0,w,c
  2823  001870  6E1B               	movwf	i2_Move$503^0,c
  2824  001872  6A1C               	clrf	(i2_Move$503+1)^0,c
  2825  001874  0EFF               	movlw	255
  2826  001876  D005               	goto	L6
  2827  001878                     i2l1793:
  2828  001878  0E01               	movlw	1
  2829  00187A  2438               	addwf	(_curTet+2)^0,w,c
  2830  00187C  6E1B               	movwf	i2_Move$503^0,c
  2831  00187E  6A1C               	clrf	(i2_Move$503+1)^0,c
  2832  001880  0E00               	movlw	0
  2833  001882                     L6:
  2834  001882  221C               	addwfc	(i2_Move$503+1)^0,f,c
  2835  001884  C01B  F019         	movff	i2_Move$503,i2_Move$502
  2836  001888  C01C  F01A         	movff	i2_Move$503+1,i2_Move$502+1
  2837  00188C                     i2l1797:
  2838  00188C  C019  F038         	movff	i2_Move$502,_curTet+2
  2839                           
  2840                           ;main.c: 399:     SetQuartet(curTet.x, curTet.y, &curTet.shape);
  2841  001890  C038  F011         	movff	_curTet+2,i2SetQuartet@y
  2842  001894  0E39               	movlw	low (_curTet+3)
  2843  001896  6E12               	movwf	i2SetQuartet@shape^0,c
  2844  001898  5037               	movf	(_curTet+1)^0,w,c
  2845  00189A  EC16  F00D         	call	i2_SetQuartet
  2846  00189E  0012               	return		;funcret
  2847  0018A0                     __end_ofi2_Move:
  2848                           	callstack 0
  2849                           
  2850 ;; *************** function i2_SetQuartet *****************
  2851 ;; Defined at:
  2852 ;;		line 352 in file "main.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;  x               1    wreg     unsigned char 
  2855 ;;  y               1   16[COMRAM] unsigned char 
  2856 ;;  shape           1   17[COMRAM] PTR struct .
  2857 ;;		 -> i2Move@curQuartet(1), Move@curQuartet(1), IsColliding@curQuartet(1), UpdateBoard@bq(1), 
  2858 ;;		 -> curTet(4), 
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;  x               1   18[COMRAM] unsigned char 
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  1    wreg      void 
  2863 ;; Registers used:
  2864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2865 ;; Tracked objects:
  2866 ;;		On entry : 0/0
  2867 ;;		On exit  : 0/0
  2868 ;;		Unchanged: 0/0
  2869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2870 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;Total ram usage:        3 bytes
  2875 ;; Hardware stack levels used:    1
  2876 ;; Hardware stack levels required when called:    1
  2877 ;; This function calls:
  2878 ;;		i2_SetBoard
  2879 ;; This function is called by:
  2880 ;;		i2_Move
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884                           	psect	text19
  2885  001A2C                     __ptext19:
  2886                           	callstack 0
  2887  001A2C                     i2_SetQuartet:
  2888                           	callstack 21
  2889                           
  2890                           ;incstack = 0
  2891                           ;i2SetQuartet@x stored from wreg
  2892  001A2C  6E13               	movwf	i2SetQuartet@x^0,c
  2893                           
  2894                           ;main.c: 352: void SetQuartet(char x, char y, Shape *shape);main.c: 353: {;main.c: 354: 
      +                              SetBoard(x, y, (char) shape->b0);
  2895  001A2E  C011  F001         	movff	i2SetQuartet@y,i2SetBoard@y
  2896  001A32  5012               	movf	i2SetQuartet@shape^0,w,c
  2897  001A34  6ED9               	movwf	fsr2l,c
  2898  001A36  6ADA               	clrf	fsr2h,c
  2899  001A38  0E00               	movlw	0
  2900  001A3A  BEDF               	btfsc	indf2,7,c
  2901  001A3C  0E01               	movlw	1
  2902  001A3E  6E02               	movwf	i2SetBoard@v^0,c
  2903  001A40  5013               	movf	i2SetQuartet@x^0,w,c
  2904  001A42  ECAF  F009         	call	i2_SetBoard
  2905                           
  2906                           ;main.c: 355:     SetBoard(x + 1, y, (char) shape->b1);
  2907  001A46  C011  F001         	movff	i2SetQuartet@y,i2SetBoard@y
  2908  001A4A  5012               	movf	i2SetQuartet@shape^0,w,c
  2909  001A4C  6ED9               	movwf	fsr2l,c
  2910  001A4E  6ADA               	clrf	fsr2h,c
  2911  001A50  0E00               	movlw	0
  2912  001A52  BCDF               	btfsc	indf2,6,c
  2913  001A54  0E01               	movlw	1
  2914  001A56  6E02               	movwf	i2SetBoard@v^0,c
  2915  001A58  2813               	incf	i2SetQuartet@x^0,w,c
  2916  001A5A  ECAF  F009         	call	i2_SetBoard
  2917                           
  2918                           ;main.c: 356:     SetBoard(x + 1, y + 1, (char) shape->b2);
  2919  001A5E  2811               	incf	i2SetQuartet@y^0,w,c
  2920  001A60  6E01               	movwf	i2SetBoard@y^0,c
  2921  001A62  5012               	movf	i2SetQuartet@shape^0,w,c
  2922  001A64  6ED9               	movwf	fsr2l,c
  2923  001A66  6ADA               	clrf	fsr2h,c
  2924  001A68  0E00               	movlw	0
  2925  001A6A  BADF               	btfsc	indf2,5,c
  2926  001A6C  0E01               	movlw	1
  2927  001A6E  6E02               	movwf	i2SetBoard@v^0,c
  2928  001A70  2813               	incf	i2SetQuartet@x^0,w,c
  2929  001A72  ECAF  F009         	call	i2_SetBoard
  2930                           
  2931                           ;main.c: 357:     SetBoard(x, y + 1, (char) shape->b3);
  2932  001A76  2811               	incf	i2SetQuartet@y^0,w,c
  2933  001A78  6E01               	movwf	i2SetBoard@y^0,c
  2934  001A7A  5012               	movf	i2SetQuartet@shape^0,w,c
  2935  001A7C  6ED9               	movwf	fsr2l,c
  2936  001A7E  6ADA               	clrf	fsr2h,c
  2937  001A80  0E00               	movlw	0
  2938  001A82  B8DF               	btfsc	indf2,4,c
  2939  001A84  0E01               	movlw	1
  2940  001A86  6E02               	movwf	i2SetBoard@v^0,c
  2941  001A88  5013               	movf	i2SetQuartet@x^0,w,c
  2942  001A8A  ECAF  F009         	call	i2_SetBoard
  2943  001A8E  0012               	return		;funcret
  2944  001A90                     __end_ofi2_SetQuartet:
  2945                           	callstack 0
  2946                           
  2947 ;; *************** function i2_SetBoard *****************
  2948 ;; Defined at:
  2949 ;;		line 226 in file "main.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;  x               1    wreg     unsigned char 
  2952 ;;  y               1    0[COMRAM] unsigned char 
  2953 ;;  v               1    1[COMRAM] unsigned char 
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;  x               1    7[COMRAM] unsigned char 
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  1    wreg      void 
  2958 ;; Registers used:
  2959 ;;		wreg, status,2, status,0
  2960 ;; Tracked objects:
  2961 ;;		On entry : 0/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2965 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2967 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;Total ram usage:       16 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		i2_SetQuartet
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           	psect	text20
  2979  00135E                     __ptext20:
  2980                           	callstack 0
  2981  00135E                     i2_SetBoard:
  2982                           	callstack 21
  2983                           
  2984                           ;incstack = 0
  2985                           ;i2SetBoard@x stored from wreg
  2986  00135E  6E08               	movwf	i2SetBoard@x^0,c
  2987                           
  2988                           ;main.c: 226: void SetBoard(char x, char y, char v);main.c: 227: {;main.c: 228:     swit
      +                          ch (x)
  2989  001360  D0B4               	goto	i2l1571
  2990  001362                     i2l1537:
  2991                           
  2992                           ;main.c: 231:             board.col0 = v == 1 ? board.col0 | (v << y) : board.col0 & ~(1
      +                           << y);
  2993  001362  0402               	decf	i2SetBoard@v^0,w,c
  2994  001364  B4D8               	btfsc	status,2,c
  2995  001366  D012               	goto	i2l1541
  2996  001368  C001  F003         	movff	i2SetBoard@y,??i2_SetBoard
  2997  00136C  0E01               	movlw	1
  2998  00136E  6E04               	movwf	(??i2_SetBoard+1)^0,c
  2999  001370  2A03               	incf	??i2_SetBoard^0,f,c
  3000  001372  D002               	goto	i2u127_44
  3001  001374                     i2u127_45:
  3002  001374  90D8               	bcf	status,0,c
  3003  001376  3604               	rlcf	(??i2_SetBoard+1)^0,f,c
  3004  001378                     i2u127_44:
  3005  001378  2E03               	decfsz	??i2_SetBoard^0,f,c
  3006  00137A  D7FC               	goto	i2u127_45
  3007  00137C  5004               	movf	(??i2_SetBoard+1)^0,w,c
  3008  00137E  0AFF               	xorlw	255
  3009  001380  1430               	andwf	_board^0,w,c
  3010  001382  6E05               	movwf	(??i2_SetBoard+2)^0,c
  3011  001384  5005               	movf	(??i2_SetBoard+2)^0,w,c
  3012  001386  6E09               	movwf	i2_SetBoard$380^0,c
  3013  001388  6A0A               	clrf	(i2_SetBoard$380+1)^0,c
  3014  00138A  D015               	goto	i2l1543
  3015  00138C                     i2l1541:
  3016  00138C  C001  F003         	movff	i2SetBoard@y,??i2_SetBoard
  3017  001390  5002               	movf	i2SetBoard@v^0,w,c
  3018  001392  6E04               	movwf	(??i2_SetBoard+1)^0,c
  3019  001394  6A05               	clrf	(??i2_SetBoard+2)^0,c
  3020  001396  2A03               	incf	??i2_SetBoard^0,f,c
  3021  001398  D003               	goto	i2u128_44
  3022  00139A                     i2u128_45:
  3023  00139A  90D8               	bcf	status,0,c
  3024  00139C  3604               	rlcf	(??i2_SetBoard+1)^0,f,c
  3025  00139E  3605               	rlcf	(??i2_SetBoard+2)^0,f,c
  3026  0013A0                     i2u128_44:
  3027  0013A0  2E03               	decfsz	??i2_SetBoard^0,f,c
  3028  0013A2  D7FB               	goto	i2u128_45
  3029  0013A4  5030               	movf	_board^0,w,c
  3030  0013A6  6E06               	movwf	(??i2_SetBoard+3)^0,c
  3031  0013A8  6A07               	clrf	(??i2_SetBoard+4)^0,c
  3032  0013AA  5004               	movf	(??i2_SetBoard+1)^0,w,c
  3033  0013AC  1006               	iorwf	(??i2_SetBoard+3)^0,w,c
  3034  0013AE  6E09               	movwf	i2_SetBoard$380^0,c
  3035  0013B0  5005               	movf	(??i2_SetBoard+2)^0,w,c
  3036  0013B2  1007               	iorwf	(??i2_SetBoard+4)^0,w,c
  3037  0013B4  6E0A               	movwf	(i2_SetBoard$380+1)^0,c
  3038  0013B6                     i2l1543:
  3039  0013B6  C009  F030         	movff	i2_SetBoard$380,_board
  3040                           
  3041                           ;main.c: 232:             break;
  3042  0013BA  0012               	return	
  3043  0013BC                     i2l1545:
  3044                           
  3045                           ;main.c: 234:             board.col1 = v == 1 ? board.col1 | (v << y) : board.col1 & ~(1
      +                           << y);
  3046  0013BC  0402               	decf	i2SetBoard@v^0,w,c
  3047  0013BE  B4D8               	btfsc	status,2,c
  3048  0013C0  D012               	goto	i2l1549
  3049  0013C2  C001  F003         	movff	i2SetBoard@y,??i2_SetBoard
  3050  0013C6  0E01               	movlw	1
  3051  0013C8  6E04               	movwf	(??i2_SetBoard+1)^0,c
  3052  0013CA  2A03               	incf	??i2_SetBoard^0,f,c
  3053  0013CC  D002               	goto	i2u130_44
  3054  0013CE                     i2u130_45:
  3055  0013CE  90D8               	bcf	status,0,c
  3056  0013D0  3604               	rlcf	(??i2_SetBoard+1)^0,f,c
  3057  0013D2                     i2u130_44:
  3058  0013D2  2E03               	decfsz	??i2_SetBoard^0,f,c
  3059  0013D4  D7FC               	goto	i2u130_45
  3060  0013D6  5004               	movf	(??i2_SetBoard+1)^0,w,c
  3061  0013D8  0AFF               	xorlw	255
  3062  0013DA  1431               	andwf	(_board+1)^0,w,c
  3063  0013DC  6E05               	movwf	(??i2_SetBoard+2)^0,c
  3064  0013DE  5005               	movf	(??i2_SetBoard+2)^0,w,c
  3065  0013E0  6E0B               	movwf	i2_SetBoard$381^0,c
  3066  0013E2  6A0C               	clrf	(i2_SetBoard$381+1)^0,c
  3067  0013E4  D015               	goto	i2l1551
  3068  0013E6                     i2l1549:
  3069  0013E6  C001  F003         	movff	i2SetBoard@y,??i2_SetBoard
  3070  0013EA  5002               	movf	i2SetBoard@v^0,w,c
  3071  0013EC  6E04               	movwf	(??i2_SetBoard+1)^0,c
  3072  0013EE  6A05               	clrf	(??i2_SetBoard+2)^0,c
  3073  0013F0  2A03               	incf	??i2_SetBoard^0,f,c
  3074  0013F2  D003               	goto	i2u131_44
  3075  0013F4                     i2u131_45:
  3076  0013F4  90D8               	bcf	status,0,c
  3077  0013F6  3604               	rlcf	(??i2_SetBoard+1)^0,f,c
  3078  0013F8  3605               	rlcf	(??i2_SetBoard+2)^0,f,c
  3079  0013FA                     i2u131_44:
  3080  0013FA  2E03               	decfsz	??i2_SetBoard^0,f,c
  3081  0013FC  D7FB               	goto	i2u131_45
  3082  0013FE  5031               	movf	(_board+1)^0,w,c
  3083  001400  6E06               	movwf	(??i2_SetBoard+3)^0,c
  3084  001402  6A07               	clrf	(??i2_SetBoard+4)^0,c
  3085  001404  5004               	movf	(??i2_SetBoard+1)^0,w,c
  3086  001406  1006               	iorwf	(??i2_SetBoard+3)^0,w,c
  3087  001408  6E0B               	movwf	i2_SetBoard$381^0,c
  3088  00140A  5005               	movf	(??i2_SetBoard+2)^0,w,c
  3089  00140C  1007               	iorwf	(??i2_SetBoard+4)^0,w,c
  3090  00140E  6E0C               	movwf	(i2_SetBoard$381+1)^0,c
  3091  001410                     i2l1551:
  3092  001410  C00B  F031         	movff	i2_SetBoard$381,_board+1
  3093                           
  3094                           ;main.c: 235:             break;
  3095  001414  0012               	return	
  3096  001416                     i2l1553:
  3097                           
  3098                           ;main.c: 237:             board.col2 = v == 1 ? board.col2 | (v << y) : board.col2 & ~(1
      +                           << y);
  3099  001416  0402               	decf	i2SetBoard@v^0,w,c
  3100  001418  B4D8               	btfsc	status,2,c
  3101  00141A  D012               	goto	i2l1557
  3102  00141C  C001  F003         	movff	i2SetBoard@y,??i2_SetBoard
  3103  001420  0E01               	movlw	1
  3104  001422  6E04               	movwf	(??i2_SetBoard+1)^0,c
  3105  001424  2A03               	incf	??i2_SetBoard^0,f,c
  3106  001426  D002               	goto	i2u133_44
  3107  001428                     i2u133_45:
  3108  001428  90D8               	bcf	status,0,c
  3109  00142A  3604               	rlcf	(??i2_SetBoard+1)^0,f,c
  3110  00142C                     i2u133_44:
  3111  00142C  2E03               	decfsz	??i2_SetBoard^0,f,c
  3112  00142E  D7FC               	goto	i2u133_45
  3113  001430  5004               	movf	(??i2_SetBoard+1)^0,w,c
  3114  001432  0AFF               	xorlw	255
  3115  001434  1432               	andwf	(_board+2)^0,w,c
  3116  001436  6E05               	movwf	(??i2_SetBoard+2)^0,c
  3117  001438  5005               	movf	(??i2_SetBoard+2)^0,w,c
  3118  00143A  6E0D               	movwf	i2_SetBoard$382^0,c
  3119  00143C  6A0E               	clrf	(i2_SetBoard$382+1)^0,c
  3120  00143E  D015               	goto	i2l1559
  3121  001440                     i2l1557:
  3122  001440  C001  F003         	movff	i2SetBoard@y,??i2_SetBoard
  3123  001444  5002               	movf	i2SetBoard@v^0,w,c
  3124  001446  6E04               	movwf	(??i2_SetBoard+1)^0,c
  3125  001448  6A05               	clrf	(??i2_SetBoard+2)^0,c
  3126  00144A  2A03               	incf	??i2_SetBoard^0,f,c
  3127  00144C  D003               	goto	i2u134_44
  3128  00144E                     i2u134_45:
  3129  00144E  90D8               	bcf	status,0,c
  3130  001450  3604               	rlcf	(??i2_SetBoard+1)^0,f,c
  3131  001452  3605               	rlcf	(??i2_SetBoard+2)^0,f,c
  3132  001454                     i2u134_44:
  3133  001454  2E03               	decfsz	??i2_SetBoard^0,f,c
  3134  001456  D7FB               	goto	i2u134_45
  3135  001458  5032               	movf	(_board+2)^0,w,c
  3136  00145A  6E06               	movwf	(??i2_SetBoard+3)^0,c
  3137  00145C  6A07               	clrf	(??i2_SetBoard+4)^0,c
  3138  00145E  5004               	movf	(??i2_SetBoard+1)^0,w,c
  3139  001460  1006               	iorwf	(??i2_SetBoard+3)^0,w,c
  3140  001462  6E0D               	movwf	i2_SetBoard$382^0,c
  3141  001464  5005               	movf	(??i2_SetBoard+2)^0,w,c
  3142  001466  1007               	iorwf	(??i2_SetBoard+4)^0,w,c
  3143  001468  6E0E               	movwf	(i2_SetBoard$382+1)^0,c
  3144  00146A                     i2l1559:
  3145  00146A  C00D  F032         	movff	i2_SetBoard$382,_board+2
  3146                           
  3147                           ;main.c: 238:             break;
  3148  00146E  0012               	return	
  3149  001470                     i2l1561:
  3150                           
  3151                           ;main.c: 240:             board.col3 = v == 1 ? board.col3 | (v << y) : board.col3 & ~(1
      +                           << y);
  3152  001470  0402               	decf	i2SetBoard@v^0,w,c
  3153  001472  B4D8               	btfsc	status,2,c
  3154  001474  D012               	goto	i2l1565
  3155  001476  C001  F003         	movff	i2SetBoard@y,??i2_SetBoard
  3156  00147A  0E01               	movlw	1
  3157  00147C  6E04               	movwf	(??i2_SetBoard+1)^0,c
  3158  00147E  2A03               	incf	??i2_SetBoard^0,f,c
  3159  001480  D002               	goto	i2u136_44
  3160  001482                     i2u136_45:
  3161  001482  90D8               	bcf	status,0,c
  3162  001484  3604               	rlcf	(??i2_SetBoard+1)^0,f,c
  3163  001486                     i2u136_44:
  3164  001486  2E03               	decfsz	??i2_SetBoard^0,f,c
  3165  001488  D7FC               	goto	i2u136_45
  3166  00148A  5004               	movf	(??i2_SetBoard+1)^0,w,c
  3167  00148C  0AFF               	xorlw	255
  3168  00148E  1433               	andwf	(_board+3)^0,w,c
  3169  001490  6E05               	movwf	(??i2_SetBoard+2)^0,c
  3170  001492  5005               	movf	(??i2_SetBoard+2)^0,w,c
  3171  001494  6E0F               	movwf	i2_SetBoard$383^0,c
  3172  001496  6A10               	clrf	(i2_SetBoard$383+1)^0,c
  3173  001498  D015               	goto	i2l1567
  3174  00149A                     i2l1565:
  3175  00149A  C001  F003         	movff	i2SetBoard@y,??i2_SetBoard
  3176  00149E  5002               	movf	i2SetBoard@v^0,w,c
  3177  0014A0  6E04               	movwf	(??i2_SetBoard+1)^0,c
  3178  0014A2  6A05               	clrf	(??i2_SetBoard+2)^0,c
  3179  0014A4  2A03               	incf	??i2_SetBoard^0,f,c
  3180  0014A6  D003               	goto	i2u137_44
  3181  0014A8                     i2u137_45:
  3182  0014A8  90D8               	bcf	status,0,c
  3183  0014AA  3604               	rlcf	(??i2_SetBoard+1)^0,f,c
  3184  0014AC  3605               	rlcf	(??i2_SetBoard+2)^0,f,c
  3185  0014AE                     i2u137_44:
  3186  0014AE  2E03               	decfsz	??i2_SetBoard^0,f,c
  3187  0014B0  D7FB               	goto	i2u137_45
  3188  0014B2  5033               	movf	(_board+3)^0,w,c
  3189  0014B4  6E06               	movwf	(??i2_SetBoard+3)^0,c
  3190  0014B6  6A07               	clrf	(??i2_SetBoard+4)^0,c
  3191  0014B8  5004               	movf	(??i2_SetBoard+1)^0,w,c
  3192  0014BA  1006               	iorwf	(??i2_SetBoard+3)^0,w,c
  3193  0014BC  6E0F               	movwf	i2_SetBoard$383^0,c
  3194  0014BE  5005               	movf	(??i2_SetBoard+2)^0,w,c
  3195  0014C0  1007               	iorwf	(??i2_SetBoard+4)^0,w,c
  3196  0014C2  6E10               	movwf	(i2_SetBoard$383+1)^0,c
  3197  0014C4                     i2l1567:
  3198  0014C4  C00F  F033         	movff	i2_SetBoard$383,_board+3
  3199                           
  3200                           ;main.c: 241:             break;
  3201  0014C8  0012               	return	
  3202  0014CA                     i2l1571:
  3203  0014CA  5008               	movf	i2SetBoard@x^0,w,c
  3204  0014CC  6E03               	movwf	??i2_SetBoard^0,c
  3205  0014CE  6A04               	clrf	(??i2_SetBoard+1)^0,c
  3206                           
  3207                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3208                           ; Switch size 1, requested type "simple"
  3209                           ; Number of cases is 1, Range of values is 0 to 0
  3210                           ; switch strategies available:
  3211                           ; Name         Instructions Cycles
  3212                           ; simple_byte            4     3 (average)
  3213                           ;	Chosen strategy is simple_byte
  3214  0014D0  5004               	movf	(??i2_SetBoard+1)^0,w,c
  3215  0014D2  0A00               	xorlw	0	; case 0
  3216  0014D4  A4D8               	btfss	status,2,c
  3217  0014D6  0012               	return	
  3218                           
  3219                           ; Switch size 1, requested type "simple"
  3220                           ; Number of cases is 4, Range of values is 0 to 3
  3221                           ; switch strategies available:
  3222                           ; Name         Instructions Cycles
  3223                           ; simple_byte           13     7 (average)
  3224                           ;	Chosen strategy is simple_byte
  3225  0014D8  5003               	movf	??i2_SetBoard^0,w,c
  3226  0014DA  0A00               	xorlw	0	; case 0
  3227  0014DC  B4D8               	btfsc	status,2,c
  3228  0014DE  D741               	goto	i2l1537
  3229  0014E0  0A01               	xorlw	1	; case 1
  3230  0014E2  B4D8               	btfsc	status,2,c
  3231  0014E4  D76B               	goto	i2l1545
  3232  0014E6  0A03               	xorlw	3	; case 2
  3233  0014E8  B4D8               	btfsc	status,2,c
  3234  0014EA  D795               	goto	i2l1553
  3235  0014EC  0A01               	xorlw	1	; case 3
  3236  0014EE  A4D8               	btfss	status,2,c
  3237  0014F0  0012               	return	
  3238  0014F2  D7BE               	goto	i2l1561
  3239  0014F4                     __end_ofi2_SetBoard:
  3240                           	callstack 0
  3241                           
  3242 ;; *************** function i2_GetQuartet *****************
  3243 ;; Defined at:
  3244 ;;		line 343 in file "main.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;  x               1    wreg     unsigned char 
  3247 ;;  y               1    5[COMRAM] unsigned char 
  3248 ;;  shape           1    6[COMRAM] PTR struct .
  3249 ;;		 -> i2Move@curQuartet(1), Move@curQuartet(1), IsColliding@shape(1), IsColliding@curQuartet(1), 
  3250 ;;		 -> UpdateBoard@bq(1), 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  x               1   17[COMRAM] unsigned char 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  1    wreg      void 
  3255 ;; Registers used:
  3256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3262 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;Total ram usage:       13 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    1
  3269 ;; This function calls:
  3270 ;;		i2_GetBoard
  3271 ;; This function is called by:
  3272 ;;		i2_Move
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text21
  3277  0014F4                     __ptext21:
  3278                           	callstack 0
  3279  0014F4                     i2_GetQuartet:
  3280                           	callstack 21
  3281                           
  3282                           ;incstack = 0
  3283                           ;i2GetQuartet@x stored from wreg
  3284  0014F4  6E12               	movwf	i2GetQuartet@x^0,c
  3285                           
  3286                           ;main.c: 343: void GetQuartet(char x, char y, Shape *shape);main.c: 344: {;main.c: 345: 
      +                              shape->b0 = (x < 0 || x > 3 || y > 7 || y < 0) ? 1 : GetBoard(x, y);
  3287  0014F6  0E04               	movlw	4
  3288  0014F8  6012               	cpfslt	i2GetQuartet@x^0,c
  3289  0014FA  D00D               	goto	i2l1673
  3290  0014FC  0E08               	movlw	8
  3291  0014FE  6006               	cpfslt	i2GetQuartet@y^0,c
  3292  001500  D00A               	goto	i2l1673
  3293  001502  C006  F001         	movff	i2GetQuartet@y,i2GetBoard@y
  3294  001506  5012               	movf	i2GetQuartet@x^0,w,c
  3295  001508  EC77  F00D         	call	i2_GetBoard
  3296  00150C  6E08               	movwf	??i2_GetQuartet^0,c
  3297  00150E  5008               	movf	??i2_GetQuartet^0,w,c
  3298  001510  6E0A               	movwf	i2_GetQuartet$439^0,c
  3299  001512  6A0B               	clrf	(i2_GetQuartet$439+1)^0,c
  3300  001514  D004               	goto	i2l1675
  3301  001516                     i2l1673:
  3302  001516  0E00               	movlw	0
  3303  001518  6E0B               	movwf	(i2_GetQuartet$439+1)^0,c
  3304  00151A  0E01               	movlw	1
  3305  00151C  6E0A               	movwf	i2_GetQuartet$439^0,c
  3306  00151E                     i2l1675:
  3307  00151E  5007               	movf	i2GetQuartet@shape^0,w,c
  3308  001520  6ED9               	movwf	fsr2l,c
  3309  001522  6ADA               	clrf	fsr2h,c
  3310  001524  B00A               	btfsc	i2_GetQuartet$439^0,0,c
  3311  001526  D002               	bra	i2u149_45
  3312  001528  9EDF               	bcf	indf2,7,c
  3313  00152A  D001               	bra	i2u149_46
  3314  00152C                     i2u149_45:
  3315  00152C  8EDF               	bsf	indf2,7,c
  3316  00152E                     i2u149_46:
  3317                           
  3318                           ;main.c: 346:     shape->b1 = (x + 1 < 0 || x + 1 > 3 || y > 7 || y < 0) ? 1 : GetBoard(
      +                          x + 1, y);
  3319  00152E  5012               	movf	i2GetQuartet@x^0,w,c
  3320  001530  6E08               	movwf	??i2_GetQuartet^0,c
  3321  001532  6A09               	clrf	(??i2_GetQuartet+1)^0,c
  3322  001534  0E01               	movlw	1
  3323  001536  2408               	addwf	??i2_GetQuartet^0,w,c
  3324  001538  0E00               	movlw	0
  3325  00153A  2009               	addwfc	(??i2_GetQuartet+1)^0,w,c
  3326  00153C  0B80               	andlw	128
  3327  00153E  A4D8               	btfss	status,2,c
  3328  001540  D01C               	goto	i2l1685
  3329  001542  5012               	movf	i2GetQuartet@x^0,w,c
  3330  001544  6E08               	movwf	??i2_GetQuartet^0,c
  3331  001546  6A09               	clrf	(??i2_GetQuartet+1)^0,c
  3332  001548  0E01               	movlw	1
  3333  00154A  2608               	addwf	??i2_GetQuartet^0,f,c
  3334  00154C  0E00               	movlw	0
  3335  00154E  2209               	addwfc	(??i2_GetQuartet+1)^0,f,c
  3336  001550  BE09               	btfsc	(??i2_GetQuartet+1)^0,7,c
  3337  001552  D006               	goto	i2u151_40
  3338  001554  5009               	movf	(??i2_GetQuartet+1)^0,w,c
  3339  001556  E111               	bnz	i2l1685
  3340  001558  0E04               	movlw	4
  3341  00155A  5C08               	subwf	??i2_GetQuartet^0,w,c
  3342  00155C  B0D8               	btfsc	status,0,c
  3343  00155E  D00D               	goto	i2l1685
  3344  001560                     i2u151_40:
  3345  001560  0E08               	movlw	8
  3346  001562  6006               	cpfslt	i2GetQuartet@y^0,c
  3347  001564  D00A               	goto	i2l1685
  3348  001566  C006  F001         	movff	i2GetQuartet@y,i2GetBoard@y
  3349  00156A  2812               	incf	i2GetQuartet@x^0,w,c
  3350  00156C  EC77  F00D         	call	i2_GetBoard
  3351  001570  6E08               	movwf	??i2_GetQuartet^0,c
  3352  001572  5008               	movf	??i2_GetQuartet^0,w,c
  3353  001574  6E0C               	movwf	i2_GetQuartet$440^0,c
  3354  001576  6A0D               	clrf	(i2_GetQuartet$440+1)^0,c
  3355  001578  D004               	goto	i2l1687
  3356  00157A                     i2l1685:
  3357  00157A  0E00               	movlw	0
  3358  00157C  6E0D               	movwf	(i2_GetQuartet$440+1)^0,c
  3359  00157E  0E01               	movlw	1
  3360  001580  6E0C               	movwf	i2_GetQuartet$440^0,c
  3361  001582                     i2l1687:
  3362  001582  5007               	movf	i2GetQuartet@shape^0,w,c
  3363  001584  6ED9               	movwf	fsr2l,c
  3364  001586  6ADA               	clrf	fsr2h,c
  3365  001588  B00C               	btfsc	i2_GetQuartet$440^0,0,c
  3366  00158A  D002               	bra	i2u153_45
  3367  00158C  9CDF               	bcf	indf2,6,c
  3368  00158E  D001               	bra	i2u153_46
  3369  001590                     i2u153_45:
  3370  001590  8CDF               	bsf	indf2,6,c
  3371  001592                     i2u153_46:
  3372                           
  3373                           ;main.c: 347:     shape->b2 = (x + 1 < 0 || x + 1 > 3 || y + 1 > 7 || y + 1 < 0) ? 1 : G
      +                          etBoard(x + 1, y + 1);
  3374  001592  5012               	movf	i2GetQuartet@x^0,w,c
  3375  001594  6E08               	movwf	??i2_GetQuartet^0,c
  3376  001596  6A09               	clrf	(??i2_GetQuartet+1)^0,c
  3377  001598  0E01               	movlw	1
  3378  00159A  2408               	addwf	??i2_GetQuartet^0,w,c
  3379  00159C  0E00               	movlw	0
  3380  00159E  2009               	addwfc	(??i2_GetQuartet+1)^0,w,c
  3381  0015A0  0B80               	andlw	128
  3382  0015A2  A4D8               	btfss	status,2,c
  3383  0015A4  D032               	goto	i2l1699
  3384  0015A6  5012               	movf	i2GetQuartet@x^0,w,c
  3385  0015A8  6E08               	movwf	??i2_GetQuartet^0,c
  3386  0015AA  6A09               	clrf	(??i2_GetQuartet+1)^0,c
  3387  0015AC  0E01               	movlw	1
  3388  0015AE  2608               	addwf	??i2_GetQuartet^0,f,c
  3389  0015B0  0E00               	movlw	0
  3390  0015B2  2209               	addwfc	(??i2_GetQuartet+1)^0,f,c
  3391  0015B4  BE09               	btfsc	(??i2_GetQuartet+1)^0,7,c
  3392  0015B6  D006               	goto	i2u155_40
  3393  0015B8  5009               	movf	(??i2_GetQuartet+1)^0,w,c
  3394  0015BA  E127               	bnz	i2l1699
  3395  0015BC  0E04               	movlw	4
  3396  0015BE  5C08               	subwf	??i2_GetQuartet^0,w,c
  3397  0015C0  B0D8               	btfsc	status,0,c
  3398  0015C2  D023               	goto	i2l1699
  3399  0015C4                     i2u155_40:
  3400  0015C4  5006               	movf	i2GetQuartet@y^0,w,c
  3401  0015C6  6E08               	movwf	??i2_GetQuartet^0,c
  3402  0015C8  6A09               	clrf	(??i2_GetQuartet+1)^0,c
  3403  0015CA  0E01               	movlw	1
  3404  0015CC  2608               	addwf	??i2_GetQuartet^0,f,c
  3405  0015CE  0E00               	movlw	0
  3406  0015D0  2209               	addwfc	(??i2_GetQuartet+1)^0,f,c
  3407  0015D2  BE09               	btfsc	(??i2_GetQuartet+1)^0,7,c
  3408  0015D4  D006               	goto	i2u156_40
  3409  0015D6  5009               	movf	(??i2_GetQuartet+1)^0,w,c
  3410  0015D8  E118               	bnz	i2l1699
  3411  0015DA  0E08               	movlw	8
  3412  0015DC  5C08               	subwf	??i2_GetQuartet^0,w,c
  3413  0015DE  B0D8               	btfsc	status,0,c
  3414  0015E0  D014               	goto	i2l1699
  3415  0015E2                     i2u156_40:
  3416  0015E2  5006               	movf	i2GetQuartet@y^0,w,c
  3417  0015E4  6E08               	movwf	??i2_GetQuartet^0,c
  3418  0015E6  6A09               	clrf	(??i2_GetQuartet+1)^0,c
  3419  0015E8  0E01               	movlw	1
  3420  0015EA  2408               	addwf	??i2_GetQuartet^0,w,c
  3421  0015EC  0E00               	movlw	0
  3422  0015EE  2009               	addwfc	(??i2_GetQuartet+1)^0,w,c
  3423  0015F0  0B80               	andlw	128
  3424  0015F2  A4D8               	btfss	status,2,c
  3425  0015F4  D00A               	goto	i2l1699
  3426  0015F6  2806               	incf	i2GetQuartet@y^0,w,c
  3427  0015F8  6E01               	movwf	i2GetBoard@y^0,c
  3428  0015FA  2812               	incf	i2GetQuartet@x^0,w,c
  3429  0015FC  EC77  F00D         	call	i2_GetBoard
  3430  001600  6E08               	movwf	??i2_GetQuartet^0,c
  3431  001602  5008               	movf	??i2_GetQuartet^0,w,c
  3432  001604  6E0E               	movwf	i2_GetQuartet$441^0,c
  3433  001606  6A0F               	clrf	(i2_GetQuartet$441+1)^0,c
  3434  001608  D004               	goto	i2l1701
  3435  00160A                     i2l1699:
  3436  00160A  0E00               	movlw	0
  3437  00160C  6E0F               	movwf	(i2_GetQuartet$441+1)^0,c
  3438  00160E  0E01               	movlw	1
  3439  001610  6E0E               	movwf	i2_GetQuartet$441^0,c
  3440  001612                     i2l1701:
  3441  001612  5007               	movf	i2GetQuartet@shape^0,w,c
  3442  001614  6ED9               	movwf	fsr2l,c
  3443  001616  6ADA               	clrf	fsr2h,c
  3444  001618  B00E               	btfsc	i2_GetQuartet$441^0,0,c
  3445  00161A  D002               	bra	i2u158_45
  3446  00161C  9ADF               	bcf	indf2,5,c
  3447  00161E  D001               	bra	i2u158_46
  3448  001620                     i2u158_45:
  3449  001620  8ADF               	bsf	indf2,5,c
  3450  001622                     i2u158_46:
  3451                           
  3452                           ;main.c: 348:     shape->b3 = (x < 0 || x > 3 || y + 1 > 7 || y + 1 < 0) ? 1 : GetBoard(
      +                          x, y + 1);
  3453  001622  0E04               	movlw	4
  3454  001624  6012               	cpfslt	i2GetQuartet@x^0,c
  3455  001626  D023               	goto	i2l1711
  3456  001628  5006               	movf	i2GetQuartet@y^0,w,c
  3457  00162A  6E08               	movwf	??i2_GetQuartet^0,c
  3458  00162C  6A09               	clrf	(??i2_GetQuartet+1)^0,c
  3459  00162E  0E01               	movlw	1
  3460  001630  2608               	addwf	??i2_GetQuartet^0,f,c
  3461  001632  0E00               	movlw	0
  3462  001634  2209               	addwfc	(??i2_GetQuartet+1)^0,f,c
  3463  001636  BE09               	btfsc	(??i2_GetQuartet+1)^0,7,c
  3464  001638  D006               	goto	i2u160_40
  3465  00163A  5009               	movf	(??i2_GetQuartet+1)^0,w,c
  3466  00163C  E118               	bnz	i2l1711
  3467  00163E  0E08               	movlw	8
  3468  001640  5C08               	subwf	??i2_GetQuartet^0,w,c
  3469  001642  B0D8               	btfsc	status,0,c
  3470  001644  D014               	goto	i2l1711
  3471  001646                     i2u160_40:
  3472  001646  5006               	movf	i2GetQuartet@y^0,w,c
  3473  001648  6E08               	movwf	??i2_GetQuartet^0,c
  3474  00164A  6A09               	clrf	(??i2_GetQuartet+1)^0,c
  3475  00164C  0E01               	movlw	1
  3476  00164E  2408               	addwf	??i2_GetQuartet^0,w,c
  3477  001650  0E00               	movlw	0
  3478  001652  2009               	addwfc	(??i2_GetQuartet+1)^0,w,c
  3479  001654  0B80               	andlw	128
  3480  001656  A4D8               	btfss	status,2,c
  3481  001658  D00A               	goto	i2l1711
  3482  00165A  2806               	incf	i2GetQuartet@y^0,w,c
  3483  00165C  6E01               	movwf	i2GetBoard@y^0,c
  3484  00165E  5012               	movf	i2GetQuartet@x^0,w,c
  3485  001660  EC77  F00D         	call	i2_GetBoard
  3486  001664  6E08               	movwf	??i2_GetQuartet^0,c
  3487  001666  5008               	movf	??i2_GetQuartet^0,w,c
  3488  001668  6E10               	movwf	i2_GetQuartet$442^0,c
  3489  00166A  6A11               	clrf	(i2_GetQuartet$442+1)^0,c
  3490  00166C  D004               	goto	i2l1713
  3491  00166E                     i2l1711:
  3492  00166E  0E00               	movlw	0
  3493  001670  6E11               	movwf	(i2_GetQuartet$442+1)^0,c
  3494  001672  0E01               	movlw	1
  3495  001674  6E10               	movwf	i2_GetQuartet$442^0,c
  3496  001676                     i2l1713:
  3497  001676  5007               	movf	i2GetQuartet@shape^0,w,c
  3498  001678  6ED9               	movwf	fsr2l,c
  3499  00167A  6ADA               	clrf	fsr2h,c
  3500  00167C  B010               	btfsc	i2_GetQuartet$442^0,0,c
  3501  00167E  D002               	bra	i2u162_45
  3502  001680  98DF               	bcf	indf2,4,c
  3503  001682  D001               	bra	i2u162_46
  3504  001684                     i2u162_45:
  3505  001684  88DF               	bsf	indf2,4,c
  3506  001686                     i2u162_46:
  3507  001686  0012               	return		;funcret
  3508  001688                     __end_ofi2_GetQuartet:
  3509                           	callstack 0
  3510                           
  3511 ;; *************** function i2_GetBoard *****************
  3512 ;; Defined at:
  3513 ;;		line 245 in file "main.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;  x               1    wreg     unsigned char 
  3516 ;;  y               1    0[COMRAM] unsigned char 
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;  x               1    3[COMRAM] unsigned char 
  3519 ;;  col             1    4[COMRAM] unsigned char 
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  1    wreg      unsigned char 
  3522 ;; Registers used:
  3523 ;;		wreg, status,2, status,0
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3529 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3531 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3532 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3533 ;;Total ram usage:        5 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; This function calls:
  3536 ;;		Nothing
  3537 ;; This function is called by:
  3538 ;;		i2_GetQuartet
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542                           	psect	text22
  3543  001AEE                     __ptext22:
  3544                           	callstack 0
  3545  001AEE                     i2_GetBoard:
  3546                           	callstack 21
  3547                           
  3548                           ;incstack = 0
  3549                           ;i2GetBoard@x stored from wreg
  3550  001AEE  6E04               	movwf	i2GetBoard@x^0,c
  3551                           
  3552                           ;main.c: 245: char GetBoard(char x, char y);main.c: 246: {;main.c: 247:     char col;;ma
      +                          in.c: 248:     switch (x)
  3553  001AF0  D00C               	goto	i2l1581
  3554  001AF2                     i2l128:
  3555                           
  3556                           ;main.c: 251:             col = board.col0;
  3557  001AF2  C030  F005         	movff	_board,i2GetBoard@col
  3558                           
  3559                           ;main.c: 252:             break;
  3560  001AF6  D01D               	goto	i2l1583
  3561  001AF8                     i2l130:
  3562                           
  3563                           ;main.c: 254:             col = board.col1;
  3564  001AF8  C031  F005         	movff	_board+1,i2GetBoard@col
  3565                           
  3566                           ;main.c: 255:             break;
  3567  001AFC  D01A               	goto	i2l1583
  3568  001AFE                     i2l131:
  3569                           
  3570                           ;main.c: 257:             col = board.col2;
  3571  001AFE  C032  F005         	movff	_board+2,i2GetBoard@col
  3572                           
  3573                           ;main.c: 258:             break;
  3574  001B02  D017               	goto	i2l1583
  3575  001B04                     i2l132:
  3576                           
  3577                           ;main.c: 260:             col = board.col3;
  3578  001B04  C033  F005         	movff	_board+3,i2GetBoard@col
  3579                           
  3580                           ;main.c: 261:             break;
  3581  001B08  D014               	goto	i2l1583
  3582  001B0A                     i2l1581:
  3583  001B0A  5004               	movf	i2GetBoard@x^0,w,c
  3584  001B0C  6E02               	movwf	??i2_GetBoard^0,c
  3585  001B0E  6A03               	clrf	(??i2_GetBoard+1)^0,c
  3586                           
  3587                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3588                           ; Switch size 1, requested type "simple"
  3589                           ; Number of cases is 1, Range of values is 0 to 0
  3590                           ; switch strategies available:
  3591                           ; Name         Instructions Cycles
  3592                           ; simple_byte            4     3 (average)
  3593                           ;	Chosen strategy is simple_byte
  3594  001B10  5003               	movf	(??i2_GetBoard+1)^0,w,c
  3595  001B12  0A00               	xorlw	0	; case 0
  3596  001B14  A4D8               	btfss	status,2,c
  3597  001B16  D00D               	goto	i2l1583
  3598                           
  3599                           ; Switch size 1, requested type "simple"
  3600                           ; Number of cases is 4, Range of values is 0 to 3
  3601                           ; switch strategies available:
  3602                           ; Name         Instructions Cycles
  3603                           ; simple_byte           13     7 (average)
  3604                           ;	Chosen strategy is simple_byte
  3605  001B18  5002               	movf	??i2_GetBoard^0,w,c
  3606  001B1A  0A00               	xorlw	0	; case 0
  3607  001B1C  B4D8               	btfsc	status,2,c
  3608  001B1E  D7E9               	goto	i2l128
  3609  001B20  0A01               	xorlw	1	; case 1
  3610  001B22  B4D8               	btfsc	status,2,c
  3611  001B24  D7E9               	goto	i2l130
  3612  001B26  0A03               	xorlw	3	; case 2
  3613  001B28  B4D8               	btfsc	status,2,c
  3614  001B2A  D7E9               	goto	i2l131
  3615  001B2C  0A01               	xorlw	1	; case 3
  3616  001B2E  B4D8               	btfsc	status,2,c
  3617  001B30  D7E9               	goto	i2l132
  3618  001B32                     i2l1583:
  3619                           
  3620                           ;main.c: 264:     return ((col >> y) & 0x01);
  3621  001B32  C001  F002         	movff	i2GetBoard@y,??i2_GetBoard
  3622  001B36  C005  F003         	movff	i2GetBoard@col,??i2_GetBoard+1
  3623  001B3A  2A02               	incf	??i2_GetBoard^0,f,c
  3624  001B3C  D002               	goto	i2u138_44
  3625  001B3E                     i2u138_45:
  3626  001B3E  90D8               	bcf	status,0,c
  3627  001B40  3203               	rrcf	(??i2_GetBoard+1)^0,f,c
  3628  001B42                     i2u138_44:
  3629  001B42  2E02               	decfsz	??i2_GetBoard^0,f,c
  3630  001B44  D7FC               	goto	i2u138_45
  3631  001B46  5003               	movf	(??i2_GetBoard+1)^0,w,c
  3632  001B48  0B01               	andlw	1
  3633  001B4A  0012               	return		;funcret
  3634  001B4C                     __end_ofi2_GetBoard:
  3635                           	callstack 0
  3636                           
  3637 ;; *************** function _HandlePortB *****************
  3638 ;; Defined at:
  3639 ;;		line 442 in file "main.c"
  3640 ;; Parameters:    Size  Location     Type
  3641 ;;		None
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;  currentPortB    1    2[COMRAM] unsigned char 
  3644 ;;  changedBits     1    1[COMRAM] unsigned char 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  1    wreg      void 
  3647 ;; Registers used:
  3648 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;Total ram usage:        2 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    1
  3661 ;; This function calls:
  3662 ;;		i2_RotateShape
  3663 ;; This function is called by:
  3664 ;;		_HandleInterrupt
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text23
  3669  001BE4                     __ptext23:
  3670                           	callstack 0
  3671  001BE4                     _HandlePortB:
  3672                           	callstack 23
  3673                           
  3674                           ;main.c: 444:     char currentPortB = PORTB;
  3675                           
  3676                           ;incstack = 0
  3677  001BE4  CF81 F003          	movff	3969,HandlePortB@currentPortB	;volatile
  3678                           
  3679                           ;main.c: 445:     char changedBits = currentPortB ^ lastPortB;
  3680  001BE8  5003               	movf	HandlePortB@currentPortB^0,w,c
  3681  001BEA  183A               	xorwf	_lastPortB^0,w,c
  3682  001BEC  6E02               	movwf	HandlePortB@changedBits^0,c
  3683                           
  3684                           ;main.c: 448:     if (changedBits & (1 << 5))
  3685  001BEE  BA02               	btfsc	HandlePortB@changedBits^0,5,c
  3686                           
  3687                           ;main.c: 449:     {;main.c: 450:         if (currentPortB & (1 << 5))
  3688  001BF0  AA03               	btfss	HandlePortB@currentPortB^0,5,c
  3689  001BF2  D008               	goto	i2l1857
  3690                           
  3691                           ;main.c: 451:         {;main.c: 453:             if (curTet.type == 2)
  3692  001BF4  0E02               	movlw	2
  3693  001BF6  1836               	xorwf	_curTet^0,w,c
  3694  001BF8  A4D8               	btfss	status,2,c
  3695  001BFA  D004               	goto	i2l1857
  3696                           
  3697                           ;main.c: 454:             {;main.c: 455:                 RotateShape(&curTet.shape);
  3698  001BFC  0E39               	movlw	low (_curTet+3)
  3699  001BFE  6E01               	movwf	i2RotateShape@shape^0,c
  3700  001C00  ECDD  F00D         	call	i2_RotateShape	;wreg free
  3701  001C04                     i2l1857:
  3702                           
  3703                           ;main.c: 468:     lastPortB = currentPortB;
  3704                           
  3705                           ;main.c: 466:     }
  3706  001C04  C003  F03A         	movff	HandlePortB@currentPortB,_lastPortB
  3707  001C08  0012               	return		;funcret
  3708  001C0A                     __end_of_HandlePortB:
  3709                           	callstack 0
  3710                           
  3711 ;; *************** function i2_RotateShape *****************
  3712 ;; Defined at:
  3713 ;;		line 402 in file "main.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;  shape           1    0[COMRAM] PTR struct .
  3716 ;;		 -> curTet(4), 
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;		None
  3719 ;; Return value:  Size  Location     Type
  3720 ;;                  1    wreg      void 
  3721 ;; Registers used:
  3722 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3723 ;; Tracked objects:
  3724 ;;		On entry : 0/0
  3725 ;;		On exit  : 0/0
  3726 ;;		Unchanged: 0/0
  3727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3728 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3731 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3732 ;;Total ram usage:        1 bytes
  3733 ;; Hardware stack levels used:    1
  3734 ;; This function calls:
  3735 ;;		Nothing
  3736 ;; This function is called by:
  3737 ;;		_HandlePortB
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           	psect	text24
  3742  001BBA                     __ptext24:
  3743                           	callstack 0
  3744  001BBA                     i2_RotateShape:
  3745                           	callstack 23
  3746                           
  3747                           ;main.c: 402: void RotateShape(Shape *shape);main.c: 403: {;main.c: 404:     shape->byte
      +                           >>= 1;
  3748                           
  3749                           ;incstack = 0
  3750  001BBA  5001               	movf	i2RotateShape@shape^0,w,c
  3751  001BBC  6ED9               	movwf	fsr2l,c
  3752  001BBE  6ADA               	clrf	fsr2h,c
  3753  001BC0  90D8               	bcf	status,0,c
  3754  001BC2  32DF               	rrcf	indf2,f,c
  3755                           
  3756                           ;main.c: 405:     shape->b0 = shape->r3;
  3757  001BC4  5001               	movf	i2RotateShape@shape^0,w,c
  3758  001BC6  6ED9               	movwf	fsr2l,c
  3759  001BC8  6ADA               	clrf	fsr2h,c
  3760  001BCA  5001               	movf	i2RotateShape@shape^0,w,c
  3761  001BCC  6EE1               	movwf	fsr1l,c
  3762  001BCE  6AE2               	clrf	fsr1h,c
  3763  001BD0  B6DF               	btfsc	indf2,3,c
  3764  001BD2  D002               	bra	i2u180_45
  3765  001BD4  9EE7               	bcf	indf1,7,c
  3766  001BD6  D001               	bra	i2u180_46
  3767  001BD8                     i2u180_45:
  3768  001BD8  8EE7               	bsf	indf1,7,c
  3769  001BDA                     i2u180_46:
  3770                           
  3771                           ;main.c: 406:     shape->r3 = 0;
  3772  001BDA  5001               	movf	i2RotateShape@shape^0,w,c
  3773  001BDC  6ED9               	movwf	fsr2l,c
  3774  001BDE  6ADA               	clrf	fsr2h,c
  3775  001BE0  96DF               	bcf	indf2,3,c
  3776  001BE2  0012               	return		;funcret
  3777  001BE4                     __end_ofi2_RotateShape:
  3778                           	callstack 0
  3779                           
  3780                           	psect	rparam
  3781  0000                     
  3782                           	psect	temp
  3783  00003C                     btemp:
  3784                           	callstack 0
  3785  00003C                     	ds	1
  3786  0000                     int$flags	set	btemp
  3787  0000                     wtemp8	set	btemp+1
  3788  0000                     ttemp5	set	btemp+1
  3789  0000                     ttemp6	set	btemp+4
  3790  0000                     ttemp7	set	btemp+8
  3791                           
  3792                           	psect	idloc
  3793                           
  3794                           ;Config register IDLOC0 @ 0x200000
  3795                           ;	unspecified, using default values
  3796  200000                     	org	2097152
  3797  200000  FF                 	db	255
  3798                           
  3799                           ;Config register IDLOC1 @ 0x200001
  3800                           ;	unspecified, using default values
  3801  200001                     	org	2097153
  3802  200001  FF                 	db	255
  3803                           
  3804                           ;Config register IDLOC2 @ 0x200002
  3805                           ;	unspecified, using default values
  3806  200002                     	org	2097154
  3807  200002  FF                 	db	255
  3808                           
  3809                           ;Config register IDLOC3 @ 0x200003
  3810                           ;	unspecified, using default values
  3811  200003                     	org	2097155
  3812  200003  FF                 	db	255
  3813                           
  3814                           ;Config register IDLOC4 @ 0x200004
  3815                           ;	unspecified, using default values
  3816  200004                     	org	2097156
  3817  200004  FF                 	db	255
  3818                           
  3819                           ;Config register IDLOC5 @ 0x200005
  3820                           ;	unspecified, using default values
  3821  200005                     	org	2097157
  3822  200005  FF                 	db	255
  3823                           
  3824                           ;Config register IDLOC6 @ 0x200006
  3825                           ;	unspecified, using default values
  3826  200006                     	org	2097158
  3827  200006  FF                 	db	255
  3828                           
  3829                           ;Config register IDLOC7 @ 0x200007
  3830                           ;	unspecified, using default values
  3831  200007                     	org	2097159
  3832  200007  FF                 	db	255
  3833                           
  3834                           	psect	config
  3835                           
  3836                           ; Padding undefined space
  3837  300000                     	org	3145728
  3838  300000  FF                 	db	255
  3839                           
  3840                           ;Config register CONFIG1H @ 0x300001
  3841                           ;	Oscillator Selection bits
  3842                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  3843                           ;	Fail-Safe Clock Monitor Enable bit
  3844                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3845                           ;	Internal/External Oscillator Switchover bit
  3846                           ;	IESO = OFF, Two-Speed Start-up disabled
  3847  300001                     	org	3145729
  3848  300001  06                 	db	6
  3849                           
  3850                           ;Config register CONFIG2L @ 0x300002
  3851                           ;	Power-up Timer Enable bit
  3852                           ;	PWRT = OFF, PWRT disabled
  3853                           ;	Brown-out Reset Enable bits
  3854                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3855                           ;	Brown-out Voltage bits
  3856                           ;	BORV = 0x3, unprogrammed default
  3857  300002                     	org	3145730
  3858  300002  19                 	db	25
  3859                           
  3860                           ;Config register CONFIG2H @ 0x300003
  3861                           ;	Watchdog Timer
  3862                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3863                           ;	Watchdog Timer Postscale Select bits
  3864                           ;	WDTPS = 0xF, unprogrammed default
  3865  300003                     	org	3145731
  3866  300003  1E                 	db	30
  3867                           
  3868                           ;Config register CONFIG3L @ 0x300004
  3869                           ;	unspecified, using default values
  3870                           ;	Processor Data Memory Mode Select bits
  3871                           ;	MODE = 0x3, unprogrammed default
  3872                           ;	Address Bus Width Select bits
  3873                           ;	ADDRBW = 0x3, unprogrammed default
  3874                           ;	Data Bus Width Select bit
  3875                           ;	DATABW = 0x1, unprogrammed default
  3876                           ;	External Bus Data Wait Enable bit
  3877                           ;	WAIT = 0x1, unprogrammed default
  3878  300004                     	org	3145732
  3879  300004  F3                 	db	243
  3880                           
  3881                           ;Config register CONFIG3H @ 0x300005
  3882                           ;	CCP2 MUX bit
  3883                           ;	CCP2MX = 0x1, unprogrammed default
  3884                           ;	ECCP MUX bit
  3885                           ;	ECCPMX = 0x1, unprogrammed default
  3886                           ;	Low-Power Timer1 Oscillator Enable bit
  3887                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3888                           ;	MCLR Pin Enable bit
  3889                           ;	MCLRE = ON, MCLR pin enabled; RG5 input pin disabled
  3890  300005                     	org	3145733
  3891  300005  83                 	db	131
  3892                           
  3893                           ;Config register CONFIG4L @ 0x300006
  3894                           ;	Stack Full/Underflow Reset Enable bit
  3895                           ;	STVREN = 0x1, unprogrammed default
  3896                           ;	Single-Supply ICSP Enable bit
  3897                           ;	LVP = OFF, Single-Supply ICSP disabled
  3898                           ;	Boot Block Size Select bits
  3899                           ;	BBSIZ = 0x0, unprogrammed default
  3900                           ;	Extended Instruction Set Enable bit
  3901                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3902                           ;	Background Debugger Enable bit
  3903                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  3904  300006                     	org	3145734
  3905  300006  81                 	db	129
  3906                           
  3907                           ; Padding undefined space
  3908  300007                     	org	3145735
  3909  300007  FF                 	db	255
  3910                           
  3911                           ;Config register CONFIG5L @ 0x300008
  3912                           ;	unspecified, using default values
  3913                           ;	Code Protection bit Block 0
  3914                           ;	CP0 = 0x1, unprogrammed default
  3915                           ;	Code Protection bit Block 1
  3916                           ;	CP1 = 0x1, unprogrammed default
  3917                           ;	Code Protection bit Block 2
  3918                           ;	CP2 = 0x1, unprogrammed default
  3919                           ;	Code Protection bit Block 3
  3920                           ;	CP3 = 0x1, unprogrammed default
  3921                           ;	Code Protection bit Block 4
  3922                           ;	CP4 = 0x1, unprogrammed default
  3923                           ;	Code Protection bit Block 5
  3924                           ;	CP5 = 0x1, unprogrammed default
  3925                           ;	Code Protection bit Block 6
  3926                           ;	CP6 = 0x1, unprogrammed default
  3927                           ;	Code Protection bit Block 7
  3928                           ;	CP7 = 0x1, unprogrammed default
  3929  300008                     	org	3145736
  3930  300008  FF                 	db	255
  3931                           
  3932                           ;Config register CONFIG5H @ 0x300009
  3933                           ;	unspecified, using default values
  3934                           ;	Boot Block Code Protection bit
  3935                           ;	CPB = 0x1, unprogrammed default
  3936                           ;	Data EEPROM Code Protection bit
  3937                           ;	CPD = 0x1, unprogrammed default
  3938  300009                     	org	3145737
  3939  300009  C0                 	db	192
  3940                           
  3941                           ;Config register CONFIG6L @ 0x30000A
  3942                           ;	unspecified, using default values
  3943                           ;	Write Protection bit Block 0
  3944                           ;	WRT0 = 0x1, unprogrammed default
  3945                           ;	Write Protection bit Block 1
  3946                           ;	WRT1 = 0x1, unprogrammed default
  3947                           ;	Write Protection bit Block 2
  3948                           ;	WRT2 = 0x1, unprogrammed default
  3949                           ;	Write Protection bit Block 3
  3950                           ;	WRT3 = 0x1, unprogrammed default
  3951                           ;	Write Protection bit Block 4
  3952                           ;	WRT4 = 0x1, unprogrammed default
  3953                           ;	Write Protection bit Block 5
  3954                           ;	WRT5 = 0x1, unprogrammed default
  3955                           ;	Write Protection bit Block 6
  3956                           ;	WRT6 = 0x1, unprogrammed default
  3957                           ;	Write Protection bit Block 7
  3958                           ;	WRT7 = 0x1, unprogrammed default
  3959  30000A                     	org	3145738
  3960  30000A  FF                 	db	255
  3961                           
  3962                           ;Config register CONFIG6H @ 0x30000B
  3963                           ;	unspecified, using default values
  3964                           ;	Configuration Register Write Protection bit
  3965                           ;	WRTC = 0x1, unprogrammed default
  3966                           ;	Boot Block Write Protection bit
  3967                           ;	WRTB = 0x1, unprogrammed default
  3968                           ;	Data EEPROM Write Protection bit
  3969                           ;	WRTD = 0x1, unprogrammed default
  3970  30000B                     	org	3145739
  3971  30000B  E0                 	db	224
  3972                           
  3973                           ;Config register CONFIG7L @ 0x30000C
  3974                           ;	unspecified, using default values
  3975                           ;	Table Read Protection bit Block 0
  3976                           ;	EBTR0 = 0x1, unprogrammed default
  3977                           ;	Table Read Protection bit Block 1
  3978                           ;	EBTR1 = 0x1, unprogrammed default
  3979                           ;	Table Read Protection bit Block 2
  3980                           ;	EBTR2 = 0x1, unprogrammed default
  3981                           ;	Table Read Protection bit Block 3
  3982                           ;	EBTR3 = 0x1, unprogrammed default
  3983                           ;	Table Read Protection bit Block 4
  3984                           ;	EBTR4 = 0x1, unprogrammed default
  3985                           ;	Table Read Protection bit Block 5
  3986                           ;	EBTR5 = 0x1, unprogrammed default
  3987                           ;	Table Read Protection bit Block 6
  3988                           ;	EBTR6 = 0x1, unprogrammed default
  3989                           ;	Table Read Protection bit Block 7
  3990                           ;	EBTR7 = 0x1, unprogrammed default
  3991  30000C                     	org	3145740
  3992  30000C  FF                 	db	255
  3993                           
  3994                           ;Config register CONFIG7H @ 0x30000D
  3995                           ;	unspecified, using default values
  3996                           ;	Boot Block Table Read Protection bit
  3997                           ;	EBTRB = 0x1, unprogrammed default
  3998  30000D                     	org	3145741
  3999  30000D  40                 	db	64
  4000                           tosu	equ	0xFFF
  4001                           tosh	equ	0xFFE
  4002                           tosl	equ	0xFFD
  4003                           stkptr	equ	0xFFC
  4004                           pclatu	equ	0xFFB
  4005                           pclath	equ	0xFFA
  4006                           pcl	equ	0xFF9
  4007                           tblptru	equ	0xFF8
  4008                           tblptrh	equ	0xFF7
  4009                           tblptrl	equ	0xFF6
  4010                           tablat	equ	0xFF5
  4011                           prodh	equ	0xFF4
  4012                           prodl	equ	0xFF3
  4013                           indf0	equ	0xFEF
  4014                           postinc0	equ	0xFEE
  4015                           postdec0	equ	0xFED
  4016                           preinc0	equ	0xFEC
  4017                           plusw0	equ	0xFEB
  4018                           fsr0h	equ	0xFEA
  4019                           fsr0l	equ	0xFE9
  4020                           wreg	equ	0xFE8
  4021                           indf1	equ	0xFE7
  4022                           postinc1	equ	0xFE6
  4023                           postdec1	equ	0xFE5
  4024                           preinc1	equ	0xFE4
  4025                           plusw1	equ	0xFE3
  4026                           fsr1h	equ	0xFE2
  4027                           fsr1l	equ	0xFE1
  4028                           bsr	equ	0xFE0
  4029                           indf2	equ	0xFDF
  4030                           postinc2	equ	0xFDE
  4031                           postdec2	equ	0xFDD
  4032                           preinc2	equ	0xFDC
  4033                           plusw2	equ	0xFDB
  4034                           fsr2h	equ	0xFDA
  4035                           fsr2l	equ	0xFD9
  4036                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    12
    Data        0
    BSS         10
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      59
    BANK0           160     21      21
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    RotateShape@shape	PTR struct . size(1) Largest target is 4
		 -> curTet(COMRAM[4]), 

    SetQuartet@shape	PTR struct . size(1) Largest target is 4
		 -> Move@curQuartet(BANK0[1]), IsColliding@curQuartet(BANK0[1]), UpdateBoard@bq(COMRAM[1]), curTet(COMRAM[4]), 

    GetQuartet@shape	PTR struct . size(1) Largest target is 1
		 -> Move@curQuartet(BANK0[1]), IsColliding@shape(BANK0[1]), IsColliding@curQuartet(BANK0[1]), UpdateBoard@bq(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _Update->_ListenPortA
    _UpdateBoard->_SetQuartet
    _ListenPortA->_IsColliding
    _ListenPortA->_Move
    _Move->_SetQuartet
    _IsColliding->_SetQuartet
    _SetQuartet->_SetBoard
    _GetQuartet->_GetBoard
    _InitBoard->_SetBoard

Critical Paths under _HandleInterrupt in COMRAM

    _HandleTimer->i2_Move
    i2_Move->i2_SetQuartet
    i2_SetQuartet->i2_SetBoard
    i2_GetQuartet->i2_GetBoard
    _HandlePortB->i2_RotateShape

Critical Paths under _main in BANK0

    _UpdateBoard->_GetQuartet
    _ListenPortA->_IsColliding
    _Move->_GetQuartet
    _IsColliding->_GetQuartet
    _SetQuartet->_SetBoard
    _InitBoard->_SetBoard

Critical Paths under _HandleInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HandleInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HandleInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HandleInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HandleInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HandleInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HandleInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HandleInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HandleInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HandleInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HandleInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HandleInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HandleInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HandleInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _HandleInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _HandleInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19578
                          _InitBoard
                     _InitInterrupts
                         _InitTimers
                             _Render
                             _Update
 ---------------------------------------------------------------------------------
 (1) _Update                                               0     0      0   17591
                        _ListenPortA
                        _UpdateBoard
 ---------------------------------------------------------------------------------
 (2) _UpdateBoard                                          1     1      0    5217
                                             44 COMRAM     1     1      0
                         _GetQuartet
                         _SetQuartet
 ---------------------------------------------------------------------------------
 (2) _ListenPortA                                          2     2      0   12374
                                             45 COMRAM     2     2      0
                        _IsColliding
                               _Move
 ---------------------------------------------------------------------------------
 (3) _Move                                                11    10      1    5904
                                             44 COMRAM     1     0      1
                                              9 BANK0     10    10      0
                         _GetQuartet
                         _SetQuartet
 ---------------------------------------------------------------------------------
 (3) _IsColliding                                         13    12      1    6154
                                             44 COMRAM     1     0      1
                                              9 BANK0     12    12      0
                         _BitwiseAnd
                         _GetQuartet
                         _SetQuartet
 ---------------------------------------------------------------------------------
 (3) _SetQuartet                                           3     1      2    2847
                                             41 COMRAM     3     1      2
                           _SetBoard
 ---------------------------------------------------------------------------------
 (3) _GetQuartet                                          13    11      2    2257
                                             39 COMRAM     4     2      2
                                              0 BANK0      9     9      0
                           _GetBoard
 ---------------------------------------------------------------------------------
 (4) _GetBoard                                             5     4      1     465
                                             34 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (4) _BitwiseAnd                                           2     1      1     120
                                             34 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _Render                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitTimers                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitBoard                                            2     2      0    1987
                                             41 COMRAM     2     2      0
                        _RotateShape
                           _SetBoard
 ---------------------------------------------------------------------------------
 (4) _SetBoard                                            16    14      2    1575
                                             34 COMRAM     7     5      2
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (2) _RotateShape                                          1     0      1     214
                                             34 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HandleInterrupt                                      4     4      0    2407
                                             30 COMRAM     4     4      0
                        _HandlePortB
                        _HandleTimer
 ---------------------------------------------------------------------------------
 (7) _HandleTimer                                          0     0      0    2159
                             i2_Move
 ---------------------------------------------------------------------------------
 (8) i2_Move                                              11    10      1    2159
                                             19 COMRAM    11    10      1
                       i2_GetQuartet
                       i2_SetQuartet
 ---------------------------------------------------------------------------------
 (9) i2_SetQuartet                                         3     1      2    1046
                                             16 COMRAM     3     1      2
                         i2_SetBoard
 ---------------------------------------------------------------------------------
 (10) i2_SetBoard                                         16    14      2     678
                                              0 COMRAM    16    14      2
 ---------------------------------------------------------------------------------
 (9) i2_GetQuartet                                        13    11      2     850
                                              5 COMRAM    13    11      2
                         i2_GetBoard
 ---------------------------------------------------------------------------------
 (10) i2_GetBoard                                          5     4      1     174
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (7) _HandlePortB                                          2     2      0     248
                                              1 COMRAM     2     2      0
                      i2_RotateShape
 ---------------------------------------------------------------------------------
 (8) i2_RotateShape                                        1     0      1     114
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitBoard
     _RotateShape
     _SetBoard
   _InitInterrupts
   _InitTimers
   _Render
   _Update
     _ListenPortA
       _IsColliding
         _BitwiseAnd
         _GetQuartet
           _GetBoard
         _SetQuartet
           _SetBoard
       _Move
         _GetQuartet
           _GetBoard
         _SetQuartet
           _SetBoard
     _UpdateBoard
       _GetQuartet
         _GetBoard
       _SetQuartet
         _SetBoard

 _HandleInterrupt (ROOT)
   _HandlePortB
     i2_RotateShape
   _HandleTimer
     i2_Move
       i2_GetQuartet
         i2_GetBoard
       i2_SetQuartet
         i2_SetBoard

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     15      15       5       13.1%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      3B       1       62.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      50      32        0.0%
DATA                 0      0      50       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Fri Apr 19 16:55:35 2024

                       _L 1001                       l130 1A9A                       l131 1AA0  
                     l132 1AA6                       l128 1A94                       _DOT 1009  
        IsColliding@shape 0073                       wreg 000FE8       __end_of_HandlePortB 1C0A  
     __end_of_HandleTimer 1C46          BitwiseAnd@shape1 0024          BitwiseAnd@shape2 0023  
              InitBoard@i 002A                InitBoard@j 002B                      l2001 118C  
                    l2013 1AAC                      l2101 1716                      l2015 1AD4  
                    l2031 11E8                      l2041 1248                      l2203 18E8  
                    l2043 1250                      l2029 11E0                      l2141 17D6  
                    l2133 17B2                      l2125 178C                      l2055 12DC  
                    l2231 1C68                      l2209 18EC                      l2057 12E4  
                    l2081 16BC                      l2145 17EA                      l2137 17C4  
                    l2129 179E                      l2161 1962                      l2067 1344  
                    l2069 134C                      l2093 16F0                      l2085 16CE  
                    l2097 1702                      l2089 16E2                      l2185 19C2  
                    l2177 19A2                      l2169 1982                      l1971 1040  
                    l1981 10CA                      l1973 106C                      l1991 112E  
                    l1983 10D0                      l1975 1072                      l1967 1014  
                    l1995 115A                      l1987 10FC                      l1979 109E  
                    l1997 1186                      l1989 1128                      u2004 116E  
                    u2100 1294                      u2005 1168                      u2014 1AE4  
                    u2110 12B2                      u2015 1AE0                      u1240 1C82  
                    u2060 122C                      u2045 11F6                      _LATA 000F89  
                    u2150 131A                      u2046 11F8                      _LATB 000F8A  
                    u2135 12F2                      _LATC 000F8B                      u2136 12F4  
                    _LATD 000F8C                      _LATE 000F8D                      _LATF 000F8E  
                    u2085 125E                      u2086 1260                      u2175 135A  
                    u2176 135C                      u1635 1BAE                      u1636 1BB0  
                    u1904 102A                      u1905 1026                      u1914 1054  
                    u1915 104E                      u1934 1088                      u1935 1084  
                    u1944 10B2                      u1945 10AC                      u1964 10E6  
                    u1965 10E2                      u1974 1110                      u1975 110A  
                    u1994 1144                      u1995 1140                      _Move 175A  
     __end_of_IsColliding 175A                      _main 1C5C                      fsr1h 000FE2  
                    fsr2h 000FDA                      indf1 000FE7                      indf2 000FDF  
                    fsr1l 000FE1                      fsr2l 000FD9                      btemp 003C  
                    start 000E              ___param_bank 000000             i2_RotateShape 1BBA  
                   ?_Move 002D                _GetQuartet 11B8                     ?_main 0001  
                   _T0CON 000FD5                     i2l130 1AF8                     i2l131 1AFE  
                   i2l132 1B04                     i2l222 1B72                     i2l128 1AF2  
                   i2l225 1B7C                     _TMR0H 000FD7                     _TMR0L 000FD6  
                   _PORTA 000F80                     _PORTB 000F81                _BitwiseAnd 1C72  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISC 000F94  
                   _TRISD 000F95                     _TRISE 000F96                     _TRISF 000F97  
             ?i2_GetBoard 0001                     _board 0030                     _prevA 0035  
                   tablat 000FF5                     ttemp5 003D                     ttemp6 0040  
                   ttemp7 0044                     status 000FD8                     wtemp8 003D  
             ?i2_SetBoard 0001          __end_of_GetBoard 1AEE            ?i2_RotateShape 0001  
         __initialization 1C46              __end_of_Move 17FE             ??_ListenPortA 002E  
              _InitTimers 1C86              __end_of_main 1C72            _InitInterrupts 1C9A  
       ??_HandleInterrupt 001F                    ??_Move 002E               _HandlePortB 1BE4  
             _HandleTimer 1C2C          __end_of_SetBoard 11B8                    ??_main 0030  
          Move@curQuartet 0072             __activetblptr 000003         i2GetQuartet@shape 0007  
             _IsColliding 1688                    _ADCON1 000FC1                    i2l1701 1612  
                  i2l1541 138C                    i2l1711 166E                    i2l1551 1410  
                  i2l1543 13B6                    i2l1713 1676                    i2l1561 1470  
                  i2l1553 1416                    i2l1545 13BC                    i2l1537 1362  
                  i2l1571 14CA                    i2l1581 1B0A                    i2l1565 149A  
                  i2l1557 1440                    i2l1549 13E6                    i2l1583 1B32  
                  i2l1567 14C4                    i2l1559 146A                    i2l1673 1516  
        i2_GetQuartet$440 000C                    i2l1675 151E          i2_GetQuartet$441 000E  
        i2_GetQuartet$442 0010                    i2l1685 157A                    i2l1781 1840  
                  i2l1687 1582                    i2l1857 1C04                    i2l1793 1878  
                  i2l1785 1854                    i2l1777 182E          i2_GetQuartet$439 000A  
                  i2l1699 160A                    i2l1797 188C                    i2l1789 1866  
                  _INTCON 000FF2        __size_of_InitBoard 0098                _SetQuartet 19C8  
                  _SQUARE 1005                    i2_Move 17FE    __end_of_InitInterrupts 1CAE  
                  _Render 1CAE                    _Update 1CC0       __size_ofi2_GetBoard 005E  
                  _curTet 0036                    clear_0 1C4C               ?_GetQuartet 0028  
     __end_of_ListenPortA 19C8               ?_BitwiseAnd 0023       __size_ofi2_SetBoard 0196  
            __mediumconst 0000        HandleTimer@counter 0034                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8             ??_UpdateBoard 002D  
              __accesstop 0060   __end_of__initialization 1C52             ___rparam_used 000001  
         ??i2_RotateShape 0002             ??_RotateShape 0024           ?_InitInterrupts 0001  
          __pcstackCOMRAM 0001               ?_InitTimers 0001        i2RotateShape@shape 0001  
       __end_of_InitBoard 1938                 ?_GetBoard 0023               SetQuartet@x 002C  
             SetQuartet@y 002A               ?_SetQuartet 002A                   ?i2_Move 0014  
              __pnvCOMRAM 003A       __size_of_GetQuartet 01A6                 ?_SetBoard 0023  
     __size_of_BitwiseAnd 0014                   ?_Render 0001                   ?_Update 0001  
     __end_of_UpdateBoard 1C2C               _ListenPortA 1938            _GetQuartet$440 0062  
          _GetQuartet$441 0064            _GetQuartet$442 0066            _GetQuartet$439 0060  
     __end_of_RotateShape 1BBA              ??i2_GetBoard 0002                ??_GetBoard 0024  
     __size_of_InitTimers 0014           __size_ofi2_Move 00A2              ??i2_SetBoard 0003  
         _HandleInterrupt 0008                ??_SetBoard 0025                   __Hparam 0000  
                 __Lparam 0000           __size_of_Render 0012           __size_of_Update 000A  
      __end_ofi2_GetBoard 1B4C              __psmallconst 1000                   __pcinit 1C46  
            ?_HandlePortB 0001              ?_HandleTimer 0001                   __ramtop 1000  
           ?i2_GetQuartet 0006                   __ptext0 1C5C                   __ptext1 1CC0  
                 __ptext2 1C0A                   __ptext3 1938                   __ptext4 175A  
                 __ptext5 1688                   __ptext6 19C8                   __ptext7 11B8  
                 __ptext8 1A90                   __ptext9 1C72                 _T0CONbits 000FD5  
     __size_of_SetQuartet 0064             i2GetBoard@col 0005        __end_ofi2_SetBoard 14F4  
            ?_IsColliding 002D            __pintcode_body 1B4C      end_of_initialization 1C52  
                 int_func 1B4C               _UpdateBoard 1C0A                 GetBoard@x 0026  
               GetBoard@y 0023      IsColliding@returnVal 0069               _RotateShape 1B90  
                 postinc0 000FEE            ??i2_GetQuartet 0008              ??_GetQuartet 002A  
            ??_BitwiseAnd 0024           GetQuartet@shape 0029   __end_of_HandleInterrupt 1B90  
           i2GetQuartet@x 0012             i2GetQuartet@y 0006           IsColliding@dir0 0072  
         IsColliding@dir1 002D          ??_InitInterrupts 0023             ?i2_SetQuartet 0011  
      __end_of_GetQuartet 135E            __end_of_SQUARE 1009            __end_ofi2_Move 18A0  
      __end_of_BitwiseAnd 1C86              ??_InitTimers 0023            __end_of_Render 1CC0  
          __end_of_Update 1CCA                 SetBoard@v 0024                 SetBoard@x 0060  
               SetBoard@y 0023       start_initialization 1C46                 _InitBoard 18A0  
             __end_of_DOT 100D         __size_of_GetBoard 005E        __end_of_InitTimers 1C9A  
          ??i2_SetQuartet 0013              ??_SetQuartet 002C                  ??i2_Move 0015  
                ??_Render 0023     __end_ofi2_RotateShape 1BE4         __size_of_SetBoard 01AA  
                ??_Update 0030              ?_ListenPortA 0001    HandlePortB@changedBits 0002  
 HandlePortB@currentPortB 0003      __size_of_HandlePortB 0026      __size_of_HandleTimer 001A  
      __end_of_SetQuartet 1A2C               __pbssCOMRAM 0030                ?_InitBoard 0001  
           __pcstackBANK0 0060                 __end_of_L 1005          ?_HandleInterrupt 0001  
    __size_of_IsColliding 00D2              _SetBoard$380 0061              _SetBoard$381 0063  
            _SetBoard$382 0065              _SetBoard$383 0067      __end_ofi2_GetQuartet 1688  
       i2SetQuartet@shape 0012                 __pintcode 0008               __smallconst 1000  
               _lastPortA 003B                 _lastPortB 003A           _IsColliding$480 006A  
         _IsColliding$481 006C           _IsColliding$482 006E           _IsColliding$483 0070  
            ?_UpdateBoard 0001    ListenPortA@changedBits 002E                  i2u130_44 13D2  
                i2u130_45 13CE                  i2u131_44 13FA                  i2u131_45 13F4  
                i2u133_44 142C                  i2u133_45 1428                  i2u134_44 1454  
                i2u134_45 144E                  i2u151_40 1560                  i2u127_44 1378  
                i2u127_45 1374                  i2u160_40 1646              ?_RotateShape 0023  
                i2u136_44 1486                  i2u128_44 13A0                  i2u136_45 1482  
                i2u128_45 139A                  i2u137_44 14AE                  i2u153_45 1590  
                i2u137_45 14A8                  i2u153_46 1592                  i2u138_44 1B42  
                i2u138_45 1B3E                  i2u162_45 1684                  i2u162_46 1686  
                i2u155_40 15C4                  i2u156_40 15E2                  i2u180_45 1BD8  
                i2u180_46 1BDA                  i2u149_45 152C                  i2u149_46 152E  
                i2u158_45 1620                  i2u158_46 1622                  _RCONbits 000FD0  
    __end_ofi2_SetQuartet 1A90               ??_InitBoard 002A                  _GetBoard 1A90  
                Move@dir0 0071                  Move@dir1 002D                  _Move$500 0069  
                _Move$501 006B                  _Move$502 006D                  _Move$503 006F  
                _SetBoard 100E                  __Hrparam 0000                  __Lrparam 0000  
    __size_of_ListenPortA 0090     IsColliding@curQuartet 0074               GetBoard@col 0027  
                __ptext10 1CAE                  __ptext11 1C86                  __ptext20 135E  
                __ptext12 1C9A                  __ptext21 14F4                  __ptext13 18A0  
                __ptext22 1AEE                  __ptext14 100E                  __ptext23 1BE4  
                __ptext15 1B90                  __ptext24 1BBA                  __ptext17 1C2C  
                __ptext18 17FE                  __ptext19 1A2C     __size_ofi2_GetQuartet 0194  
           __size_of_Move 00A4             __size_of_main 0016   ListenPortA@currentPortA 002F  
             i2GetBoard@x 0004               i2GetBoard@y 0001            i2_SetBoard$380 0009  
          i2_SetBoard$381 000B            i2_SetBoard$382 000D            i2_SetBoard$383 000F  
                int$flags 003C              i2_GetQuartet 14F4             UpdateBoard@bq 002D  
              _INTCONbits 000FF2               GetQuartet@x 0068               GetQuartet@y 0028  
                intlevel2 0000             i2SetQuartet@x 0013             i2SetQuartet@y 0011  
        RotateShape@shape 0023      __size_of_UpdateBoard 0022     __size_ofi2_SetQuartet 0064  
    __size_of_RotateShape 002A   __size_of_InitInterrupts 0014             ??_HandlePortB 0002  
           ??_HandleTimer 001F               i2SetBoard@v 0002               i2SetBoard@x 0008  
             i2SetBoard@y 0001                i2_GetBoard 1AEE             ??_IsColliding 002E  
  __size_ofi2_RotateShape 002A                i2Move@dir0 001D                i2Move@dir1 0014  
              i2_Move$500 0015                i2_Move$501 0017                i2_Move$502 0019  
              i2_Move$503 001B              i2_SetQuartet 1A2C                i2_SetBoard 135E  
        i2Move@curQuartet 001E           SetQuartet@shape 002B  __size_of_HandleInterrupt 1B88  
